import React, { useState, useRef, useEffect, useCallback } from 'react';
import axios from 'axios';
import { Wrapper } from "@googlemaps/react-wrapper";
import {
  MapPin, Upload, Building, Sun, Compass, FileText,
  Palette, Square, Loader2, Sparkles, ArrowRight,
  Check, Home, Layers, Cpu, FileCode, Clock, TrendingUp,
  Users, Shield, Zap, BarChart3, Eye, AlertCircle, X, ZoomIn, ZoomOut, Maximize2
} from 'lucide-react';
import { locationIntelligence } from './services/locationIntelligence';
import aiIntegrationService from './services/aiIntegrationService';
import bimService from './services/bimService';
import dimensioningService from './services/dimensioningService';

// File download utility functions
const downloadFile = (filename, content, mimeType) => {
  const blob = new Blob([content], { type: mimeType });
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
};

// Generate DWG file content
const generateDWGContent = (projectDetails, bimModel = null) => {
  // If BIM model is available, use it to generate proper DWG
  if (bimModel) {
    try {
      console.log('Generating DWG from BIM model...');
      const dwgContent = bimService.exportToDWG(bimModel);
      return dwgContent;
    } catch (error) {
      console.error('Failed to generate DWG from BIM model:', error);
      // Fall back to placeholder content
    }
  }

  // Fallback placeholder content when no BIM model available
  return `AutoCAD Drawing File
Project: ${projectDetails?.program ? projectDetails.program.charAt(0).toUpperCase() + projectDetails.program.slice(1) : 'Architectural Design'}
Generated by ArchitectAI Platform
Date: ${new Date().toLocaleDateString()}
Area: ${projectDetails?.area || 'Not specified'}m²

[Binary DWG data would be here in a real export]

This is a demonstration file. The content below is a simplified representation.

--- PROJECT INFO ---
Building Program: ${projectDetails?.program || 'Not specified'}
Total Area: ${projectDetails?.area || 'Not specified'}m²
Style Preference: ${projectDetails?.styleChoice === 'blend' ? 'Adaptive Blend' : 'Signature Style'}

--- SIMPLIFIED FLOOR PLAN DATA ---
- Reception & Waiting: 65m²
- Consultation Rooms: 80m² (4 units)
- Staff & Admin: 30m²
- Utilities & Restrooms: 35m²

This demo file confirms that the export functionality is working. The full version would contain detailed, layered vector drawings.
`;
};

const generateRVTContent = (projectDetails) => {
  return `Revit Project File
Project: ${projectDetails?.program ? projectDetails.program.charAt(0).toUpperCase() + projectDetails.program.slice(1) : 'Architectural Design'}
Generated by ArchitectAI Platform
Date: ${new Date().toLocaleDateString()}
Version: Revit 2024

[Binary RVT data would be here in a real export]

This is a demonstration file. The content below is a simplified representation of the BIM data.

--- PROJECT INFO ---
Building Program: ${projectDetails?.program || 'Not specified'}
Total Area: ${projectDetails?.area || 'Not specified'}m²
Style Preference: ${projectDetails?.styleChoice === 'blend' ? 'Adaptive Blend' : 'Signature Style'}
Location: ${projectDetails?.address || 'Not specified'}

--- 3D MODEL INFO ---
- Stories: 1 (conceptual)
- Structural System: Hybrid steel-timber frame
- Facade: High-performance glazing, local stone accents
- MEP Systems: VRF with heat recovery, solar panel ready

This demo file confirms that the export functionality is working. The full version would contain a detailed 3D model with parametric families.
`;
};

const generateIFCContent = (projectDetails, bimModel = null) => {
  const projectName = projectDetails?.program ? projectDetails.program.charAt(0).toUpperCase() + projectDetails.program.slice(1) : 'Architectural Design';

  // If BIM model is available, use it to generate proper IFC
  if (bimModel) {
    try {
      console.log('Generating IFC from BIM model...');
      const ifcContent = bimService.exportToIFC(bimModel);
      return ifcContent;
    } catch (error) {
      console.error('Failed to generate IFC from BIM model:', error);
      // Fall back to placeholder content
    }
  }

  // Fallback placeholder content when no BIM model available
  return `ISO-10303-21;
HEADER;
FILE_DESCRIPTION(('ArchitectAI Generated Model'),'2;1');
FILE_NAME('${projectName.replace(/\s/g, '_')}.ifc','${new Date().toISOString()}',('ArchitectAI'),('AI Architecture Platform'),'IFC4','ArchitectAI Export','');
FILE_SCHEMA(('IFC4'));
ENDSEC;

DATA;
#1=IFCPROJECT('3MDNqGDETHuBCrTHSPWVCe',$,'${projectName} - ${projectDetails?.area || 'N/A'}m2',$,$,$,$,(#2),#3);
#2=IFCGEOMETRICREPRESENTATIONCONTEXT($,'Model',3,1.E-05,#4,$);
#3=IFCUNITASSIGNMENT((#5,#6,#7));
#4=IFCAXIS2PLACEMENT3D(#8,$,$);
#5=IFCSIUNIT(*,.LENGTHUNIT.,.MILLI.,.METRE.);
#6=IFCSIUNIT(*,.AREAUNIT.,$,.SQUARE_METRE.);
#7=IFCSIUNIT(*,.VOLUMEUNIT.,$,.CUBIC_METRE.);
#8=IFCCARTESIANPOINT((0.,0.,0.));

/* Building Elements (Simplified for Demo) */
#100=IFCBUILDING('2FCZDorxHDT8NI01kdXi8P',$,'${projectName}',$,$,#101,$,$,.ELEMENT.,$,$,$);
#101=IFCLOCALPLACEMENT($,#102);
#102=IFCAXIS2PLACEMENT3D(#103,$,$);
#103=IFCCARTESIANPOINT((0.,0.,0.));

ENDSEC;
END-ISO-10303-21;`;
};

// Generate dimensioned floor plan with annotations
const generateDimensionedFloorPlan = (projectDetails, generatedDesigns) => {
  try {
    // Check if we have a floor plan image to annotate
    const floorPlanImage = generatedDesigns?.floorPlan?.levels?.ground ||
                           generatedDesigns?.floorPlan?.image ||
                           null;

    if (!floorPlanImage) {
      console.error('No floor plan image available for dimensioning');
      return null;
    }

    // Generate SVG overlay with dimensions
    const svgOverlay = dimensioningService.generateSVGOverlay({
      width: 1024,
      height: 1024,
      area: projectDetails?.area || '500',
      program: projectDetails?.program || 'commercial',
      rooms: generatedDesigns?.floorPlan?.rooms || []
    });

    // Create combined HTML with image and SVG overlay
    const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dimensioned Floor Plan - ${projectDetails?.program || 'Architectural Design'}</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: Arial, sans-serif;
            background: white;
        }
        .container {
            position: relative;
            width: 1024px;
            height: 1024px;
            margin: 0 auto;
            border: 1px solid #ccc;
        }
        .floor-plan-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
        .svg-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }
        .title {
            text-align: center;
            margin-bottom: 20px;
        }
        .scale-bar {
            text-align: center;
            margin-top: 20px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="title">
        <h1>Dimensioned Floor Plan</h1>
        <p>${projectDetails?.program ? projectDetails.program.charAt(0).toUpperCase() + projectDetails.program.slice(1) : 'Architectural Design'} - ${projectDetails?.area || 'N/A'}m²</p>
        <p>Generated by ArchitectAI Platform - ${new Date().toLocaleDateString()}</p>
    </div>
    <div class="container">
        <img src="${floorPlanImage}" alt="Floor Plan" class="floor-plan-image">
        <div class="svg-overlay">${svgOverlay}</div>
    </div>
    <div class="scale-bar">
        Scale: 1:100 | Grid: 1m
    </div>
</body>
</html>`;

    return htmlContent;
  } catch (error) {
    console.error('Failed to generate dimensioned floor plan:', error);
    return null;
  }
};

const generatePDFContent = (projectDetails, styleChoice, locationData) => {
  const htmlContent = `
    <html>
    <head>
      <title>ArchitectAI - Project Documentation</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        h1 { color: #1e40af; }
        h2 { color: #3b82f6; margin-top: 30px; }
        .header { border-bottom: 2px solid #3b82f6; padding-bottom: 20px; margin-bottom: 30px; }
        .section { margin-bottom: 25px; }
        .spec-table { width: 100%; border-collapse: collapse; margin-top: 10px; }
        .spec-table th, .spec-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        .spec-table th { background-color: #f3f4f6; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>ArchitectAI Platform</h1>
        <p>Project Documentation - ${new Date().toLocaleDateString()}</p>
      </div>
      
      <h2>Project Overview</h2>
      <div class="section">
        <p><strong>Project Type:</strong> ${projectDetails?.program === 'clinic' ? 'Medical Clinic' : projectDetails?.program || 'Commercial Building'}</p>
        <p><strong>Total Area:</strong> ${projectDetails?.area || '500'}m²</p>
        <p><strong>Location:</strong> ${locationData?.address || '123 Main Street, San Francisco, CA 94105'}</p>
        <p><strong>Design Style:</strong> ${styleChoice === 'blend' ? 'Adaptive Blend with Local Architecture' : 'Portfolio Signature Style'}</p>
      </div>

      <h2>Space Program</h2>
      <table class="spec-table">
        <tr><th>Space</th><th>Area (m²)</th><th>Quantity</th></tr>
        <tr><td>Reception</td><td>25</td><td>1</td></tr>
        <tr><td>Waiting Area</td><td>40</td><td>1</td></tr>
        <tr><td>Consultation Rooms</td><td>20</td><td>4</td></tr>
        <tr><td>Staff Room</td><td>30</td><td>1</td></tr>
        <tr><td>Bathrooms</td><td>20</td><td>2</td></tr>
        <tr><td>Storage</td><td>15</td><td>1</td></tr>
      </table>

      <h2>Technical Specifications</h2>
      <div class="section">
        <h3>Structural System</h3>
        <p>Hybrid steel-timber frame with seismic resilience</p>
        
        <h3>MEP Systems</h3>
        <ul>
          <li><strong>HVAC:</strong> VRF system with heat recovery</li>
          <li><strong>Electrical:</strong> 100% LED with daylight sensors</li>
          <li><strong>Plumbing:</strong> Low-flow fixtures, greywater recycling</li>
        </ul>
      </div>

      <h2>Cost Estimation</h2>
      <div class="section">
        <p><strong>Construction Cost:</strong> $2.1M - $2.4M</p>
        <p><strong>Timeline:</strong> 12-14 months</p>
        <p><strong>Annual Energy Savings:</strong> $45,000/year</p>
      </div>

      <div style="margin-top: 50px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center; color: #666;">
        <p>Generated by ArchitectAI Platform - AI-Powered Architecture Design</p>
        <p>This is a demo document. Full technical drawings will be included in production version.</p>
      </div>
    </body>
    </html>
  `;
  
  return htmlContent;
};

const MapView = ({ center, zoom }) => {
  const ref = useRef(null);
  const mapRef = useRef(null);
  const markerRef = useRef(null);
  const [isMapLoaded, setIsMapLoaded] = useState(false);

  // Initialize map only once
  useEffect(() => {
    if (!ref.current || mapRef.current || !window.google) return;

    try {
      const newMap = new window.google.maps.Map(ref.current, {
        center,
        zoom: zoom || 18,
        mapTypeId: 'hybrid',
        tilt: 45,
        disableDefaultUI: false,
        mapTypeControl: true,
        streetViewControl: true,
        fullscreenControl: true,
        zoomControl: true,
        gestureHandling: 'cooperative',
        styles: [
          {
            featureType: 'all',
            stylers: [{ saturation: 20 }, { lightness: -10 }]
          }
        ]
      });

      // Explicitly maintain 45° tilt for satellite/hybrid views
      // This prevents the deprecation warning about automatic 45° switching
      newMap.addListener('zoom_changed', () => {
        const currentZoom = newMap.getZoom();
        const mapType = newMap.getMapTypeId();
        if ((mapType === 'satellite' || mapType === 'hybrid') && currentZoom >= 18) {
          newMap.setTilt(45);
        }
      });

      // Use AdvancedMarkerElement if available, otherwise fall back to standard Marker
      let newMarker;

      if (window.google.maps.marker && window.google.maps.marker.AdvancedMarkerElement) {
        // Create custom HTML marker element
        const markerDiv = document.createElement('div');
        markerDiv.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
            <circle cx="16" cy="16" r="12" fill="#3b82f6" stroke="#ffffff" stroke-width="3"/>
            <circle cx="16" cy="16" r="6" fill="#ffffff"/>
          </svg>
        `;

        newMarker = new window.google.maps.marker.AdvancedMarkerElement({
          position: center,
          map: newMap,
          title: 'Project Location',
          content: markerDiv
        });
      } else {
        // Fallback to standard Marker for older Maps API versions
        newMarker = new window.google.maps.Marker({
          position: center,
          map: newMap,
          title: 'Project Location',
          icon: {
            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
              <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
                <circle cx="16" cy="16" r="12" fill="#3b82f6" stroke="#ffffff" stroke-width="3"/>
                <circle cx="16" cy="16" r="6" fill="#ffffff"/>
              </svg>
            `),
            scaledSize: new window.google.maps.Size(32, 32),
            anchor: new window.google.maps.Point(16, 16),
          }
        });
      }

      mapRef.current = newMap;
      markerRef.current = newMarker;
      setIsMapLoaded(true);
    } catch (error) {
      console.error('Map initialization error:', error);
    }
  }, []); // Empty dependencies - initialize only once

  // Update map center and marker when coordinates change
  useEffect(() => {
    if (!isMapLoaded || !mapRef.current || !markerRef.current) return;

    try {
      // Handle both AdvancedMarkerElement and standard Marker
      if (markerRef.current.position && typeof markerRef.current.position === 'object') {
        // AdvancedMarkerElement uses position property
        markerRef.current.position = center;
      } else if (markerRef.current.setPosition) {
        // Standard Marker uses setPosition method
        markerRef.current.setPosition(center);
      }
      mapRef.current.setCenter(center);
    } catch (error) {
      console.error('Map update error:', error);
    }
  }, [center.lat, center.lng, isMapLoaded]); // Use specific lat/lng values to avoid object reference issues

  return <div ref={ref} style={{ width: '100%', height: '100%', borderRadius: '12px' }} />;
};

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    this.setState({ error: error, errorInfo: errorInfo });
    console.error("Uncaught error:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div style={{ padding: '20px', backgroundColor: '#fff0f0', border: '1px solid red', borderRadius: '8px' }}>
          <h2>Something went wrong. Please provide the following information to support:</h2>
          <details style={{ whiteSpace: 'pre-wrap', marginTop: '10px' }}>
            {this.state.error && this.state.error.toString()}
            <br />
            {this.state.errorInfo && this.state.errorInfo.componentStack}
          </details>
        </div>
      );
    }

    return this.props.children;
  }
}

const ArchitectAIEnhanced = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [locationData, setLocationData] = useState(null);
  const [address, setAddress] = useState("");
  const [portfolioFiles, setPortfolioFiles] = useState([]);
  const [styleChoice] = useState('blend'); // Keep for backward compatibility (read-only)
  const [blendWeight, setBlendWeight] = useState(0.5); // DEPRECATED: Keep for backward compatibility
  const [materialWeight, setMaterialWeight] = useState(0.5); // NEW: 0=100% local materials, 1=100% portfolio materials
  const [characteristicWeight, setCharacteristicWeight] = useState(0.5); // NEW: 0=100% local characteristics, 1=100% portfolio characteristics
  const [projectDetails, setProjectDetails] = useState({ area: '', program: '', entranceDirection: '' });
  const [generatedDesigns, setGeneratedDesigns] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [showModification, setShowModification] = useState(false);
  const [downloadCount, setDownloadCount] = useState(0);
  const [toastMessage, setToastMessage] = useState('');
  const [isUploading, setIsUploading] = useState(false);
  const [isDetectingLocation, setIsDetectingLocation] = useState(false);
  const [elapsedTime, setElapsedTime] = useState(0);
  const [sessionStartTime] = useState(Date.now());

  // Image Modal States
  const [modalImage, setModalImage] = useState(null);
  const [modalImageTitle, setModalImageTitle] = useState('');
  const [imageZoom, setImageZoom] = useState(1);
  const [imagePan, setImagePan] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });

  // Use refs to store current values for event handlers (prevents handler recreation)
  const imageZoomRef = useRef(1);
  const imagePanRef = useRef({ x: 0, y: 0 });
  const isDraggingRef = useRef(false);
  const dragStartRef = useRef({ x: 0, y: 0 });

  const fileInputRef = useRef(null);

  // Sync state with refs
  useEffect(() => {
    imageZoomRef.current = imageZoom;
  }, [imageZoom]);

  useEffect(() => {
    imagePanRef.current = imagePan;
  }, [imagePan]);

  useEffect(() => {
    isDraggingRef.current = isDragging;
  }, [isDragging]);

  useEffect(() => {
    dragStartRef.current = dragStart;
  }, [dragStart]);
  // const hasDetectedLocation = useRef(false); // Temporarily disabled

  const showToast = useCallback((message) => {
    setToastMessage(message);
  }, []);

  useEffect(() => {
    if (toastMessage) {
      const timer = setTimeout(() => {
        setToastMessage('');
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [toastMessage]);

  // Image Modal Handlers
  const openImageModal = useCallback((imageUrl, title = 'Image') => {
    setModalImage(imageUrl);
    setModalImageTitle(title);
    setImageZoom(1);
    setImagePan({ x: 0, y: 0 });
  }, []);

  const closeImageModal = useCallback(() => {
    setModalImage(null);
    setModalImageTitle('');
    setImageZoom(1);
    setImagePan({ x: 0, y: 0 });
    setIsDragging(false);
  }, []);

  const handleZoomIn = useCallback(() => {
    setImageZoom(prev => Math.min(prev + 0.25, 3));
  }, []);

  const handleZoomOut = useCallback(() => {
    setImageZoom(prev => Math.max(prev - 0.25, 0.5));
  }, []);

  const handleZoomReset = useCallback(() => {
    setImageZoom(1);
    setImagePan({ x: 0, y: 0 });
  }, []);

  const handleMouseDown = useCallback((e) => {
    if (imageZoomRef.current > 1) {
      e.preventDefault();
      setIsDragging(true);
      setDragStart({ x: e.clientX - imagePanRef.current.x, y: e.clientY - imagePanRef.current.y });
    }
  }, []);

  const handleMouseMove = useCallback((e) => {
    if (isDraggingRef.current && imageZoomRef.current > 1) {
      e.preventDefault();
      requestAnimationFrame(() => {
        setImagePan({
          x: e.clientX - dragStartRef.current.x,
          y: e.clientY - dragStartRef.current.y
        });
      });
    }
  }, []);

  const handleMouseUp = useCallback((e) => {
    if (e) e.preventDefault();
    setIsDragging(false);
  }, []);

  const handleWheel = useCallback((e) => {
    e.preventDefault();
    e.stopPropagation();
    const delta = e.deltaY * -0.01;
    const newZoom = Math.min(Math.max(imageZoomRef.current + delta, 0.5), 3);
    setImageZoom(newZoom);
    if (newZoom <= 1) {
      setImagePan({ x: 0, y: 0 });
    }
  }, []);

  // Real-time elapsed timer
  useEffect(() => {
    const timer = setInterval(() => {
      setElapsedTime(Math.floor((Date.now() - sessionStartTime) / 1000));
    }, 1000);
    return () => clearInterval(timer);
  }, [sessionStartTime]);

  // Format elapsed time as MM:SS
  const formatElapsedTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  // Landing page animation
  useEffect(() => {
    if (currentStep === 0) {
      const timer = setTimeout(() => {
        document.getElementById('hero-content')?.classList.add('opacity-100');
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [currentStep]);

  const detectUserLocation = useCallback(async () => {
    if (!navigator.geolocation) {
      setAddress("123 Main Street, San Francisco, CA 94105");
      showToast("Geolocation not supported. Using default location.");
      return;
    }

    setIsDetectingLocation(true);

    navigator.geolocation.getCurrentPosition(
      async (position) => {
        try {
          const { latitude: lat, longitude: lng } = position.coords;
          
          // Reverse geocode to get address
          const response = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {
            params: {
              latlng: `${lat},${lng}`,
              key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,
            },
          });

          if (response.data.status === 'OK' && response.data.results.length > 0) {
            const detectedAddress = response.data.results[0].formatted_address;
            setAddress(detectedAddress);
            showToast(`📍 Location detected: ${detectedAddress.split(',').slice(0, 2).join(',')}`);
          } else {
            setAddress("123 Main Street, San Francisco, CA 94105");
            showToast("Could not detect address. Using default location.");
          }
        } catch (error) {
          console.error('Reverse geocoding failed:', error);
          setAddress("123 Main Street, San Francisco, CA 94105");
          showToast("Location detection failed. Using default location.");
        } finally {
          setIsDetectingLocation(false);
        }
      },
      (error) => {
        console.error('Geolocation error:', error);
        setAddress("123 Main Street, San Francisco, CA 94105");
        setIsDetectingLocation(false);
        
        let errorMessage = "Location access denied. Using default location.";
        if (error.code === error.TIMEOUT) {
          errorMessage = "Location detection timed out. Using default location.";
        } else if (error.code === error.POSITION_UNAVAILABLE) {
          errorMessage = "Location unavailable. Using default location.";
        }
        
        showToast(errorMessage);
      },
      {
        timeout: 10000,
        enableHighAccuracy: true,
        maximumAge: 300000, // 5 minutes
      }
    );
  }, [showToast]);

  // Auto-detect location disabled temporarily to debug freezing issues
  // useEffect(() => {
  //   if (currentStep === 1 && !address && !isDetectingLocation && !hasDetectedLocation.current) {
  //     hasDetectedLocation.current = true;
  //     detectUserLocation();
  //   }
  //   // Reset detection flag when step changes away from 1
  //   if (currentStep !== 1) {
  //     hasDetectedLocation.current = false;
  //   }
  // }, [currentStep, address, isDetectingLocation, detectUserLocation]);

  const getSeasonalClimateData = async (lat, lon) => {
    try {
      // Use OpenWeather API v2.5 Current Weather (free tier)
      const url = 'https://api.openweathermap.org/data/2.5/weather';
      const response = await axios.get(url, {
        params: {
          lat,
          lon,
          units: 'metric',
          appid: process.env.REACT_APP_OPENWEATHER_API_KEY,
        },
      });

      const weatherData = response.data;

      // Create seasonal estimates based on current weather and location
      const currentTemp = weatherData.main.temp;
      const tempVariation = 15; // Typical seasonal temperature variation

      const finalProcessedData = {
        climate: {
          type: weatherData.weather[0]?.main || "Varied",
          seasonal: {
            winter: {
              avgTemp: `${(currentTemp - tempVariation).toFixed(1)}°C`,
              precipitation: "Moderate",
              solar: "40-50%",
            },
            spring: {
              avgTemp: `${(currentTemp - 5).toFixed(1)}°C`,
              precipitation: "Moderate",
              solar: "60-70%",
            },
            summer: {
              avgTemp: `${(currentTemp + tempVariation).toFixed(1)}°C`,
              precipitation: "Low",
              solar: "80-90%",
            },
            fall: {
              avgTemp: `${(currentTemp + 5).toFixed(1)}°C`,
              precipitation: "Moderate-High",
              solar: "50-60%",
            },
          }
        },
        sunPath: {
            summer: `Sunrise: ~6:00 AM`,
            winter: `Sunset: ~5:00 PM`,
            optimalOrientation: "South-facing (general recommendation)"
        }
      };

      return finalProcessedData;

    } catch (error) {
      console.warn("Could not retrieve seasonal climate data:", error);

      // Fallback to mock data if API fails (e.g., due to subscription error)
      if (error.response && error.response.status === 401) {
        return {
          climate: {
            type: "Mild, Mediterranean (Mock Data)",
            seasonal: {
              winter: { avgTemp: "14.0°C", precipitation: "100mm", solar: "50%" },
              spring: { avgTemp: "17.5°C", precipitation: "40mm", solar: "75%" },
              summer: { avgTemp: "22.0°C", precipitation: "5mm", solar: "90%" },
              fall: { avgTemp: "19.5°C", precipitation: "25mm", solar: "65%" },
            }
          },
          sunPath: {
              summer: "Sunrise: ~5:48 AM, Sunset: ~8:35 PM",
              winter: "Sunrise: ~7:20 AM, Sunset: ~5:00 PM",
              optimalOrientation: "South-facing for winter sun"
          }
        };
      }

      return {
        climate: { type: 'Error fetching seasonal data', seasonal: {} },
        sunPath: { summer: 'N/A', winter: 'N/A', optimalOrientation: 'N/A' }
      };
    }
  };

  // Real location analysis with Google Maps and OpenWeather
  const analyzeLocation = async () => {
    if (!address) {
      showToast("Please enter an address.");
      return;
    }
    
    setIsLoading(true);
    
    try {
      // Step 1: Geocode address to get coordinates
      let geocodeResponse;
      if (!process.env.REACT_APP_GOOGLE_MAPS_API_KEY) {
          // Fallback data if no API key
          geocodeResponse = {
              data: {
                  status: 'OK',
                  results: [
                      {
                          formatted_address: address || "123 Main Street, San Francisco, CA 94105, USA",
                          geometry: {
                              location: { lat: 37.795, lng: -122.394 }
                          },
                          address_components: [
                            { long_name: 'San Francisco', types: ['locality'] },
                            { long_name: 'California', types: ['administrative_area_level_1'] },
                            { long_name: 'United States', types: ['country'] }
                          ]
                      }
                  ]
              }
          };
      } else {
          geocodeResponse = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {
            params: {
              address: address,
              key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,
            },
          });
      }

      if (geocodeResponse.data.status !== 'OK' || !geocodeResponse.data.results || geocodeResponse.data.results.length === 0) {
        throw new Error(`Geocoding failed: ${geocodeResponse.data.status}`);
      }

      const locationResult = geocodeResponse.data.results[0];
      const { lat, lng } = locationResult.geometry.location;
      const formattedAddress = locationResult.formatted_address;

      const addressComponents = locationResult.address_components;

      // Step 2: Get seasonal climate data
      const seasonalClimateData = await getSeasonalClimateData(lat, lng);

      // Analyze zoning dynamically
      const zoningData = locationIntelligence.analyzeZoning(
        addressComponents,
        locationResult.types,
        locationResult.geometry.location
      );

      // Analyze market dynamically
      const marketContext = locationIntelligence.analyzeMarket(
        addressComponents,
        { lat, lng },
        zoningData
      );

      // Recommend architectural style
      const architecturalStyle = locationIntelligence.recommendArchitecturalStyle(locationResult, seasonalClimateData.climate);

      // Step 4: Populate location data
      const newLocationData = {
        address: formattedAddress,
        coordinates: { lat, lng },
        address_components: addressComponents, // FIX: Add address_components for locationIntelligence service
        climate: seasonalClimateData.climate,
        sunPath: seasonalClimateData.sunPath,
        zoning: zoningData,
        recommendedStyle: architecturalStyle.primary,
        localStyles: architecturalStyle.alternatives,
        sustainabilityScore: 85, // This can be dynamic later
        marketContext: marketContext,
        architecturalProfile: architecturalStyle
      };
      
      setLocationData(newLocationData);
      setCurrentStep(2);
      
    } catch (error) {
      console.error("Error analyzing location:", error);
      
      let errorMessage = "An error occurred during analysis.";
      if (error.response) {
        errorMessage = `Error: ${error.response.data.message || 'Failed to fetch data.'}`;
      } else if (error.request) {
        errorMessage = "Could not connect to the server. Please check your network.";
      } else {
        errorMessage = error.message;
      }
      
      showToast(`Error: ${errorMessage}. Check API keys and address.`);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle portfolio upload
  const handlePortfolioUpload = (e) => {
    const files = Array.from(e.target.files);
    if (files.length === 0) return;

    setIsUploading(true);

    // Use a timeout to allow the UI to update with the loader
    setTimeout(() => {
      setPortfolioFiles(files.map(file => ({
        name: file.name,
        size: (file.size / 1024 / 1024).toFixed(2) + ' MB',
        type: file.type,
        preview: URL.createObjectURL(file)
      })));
      setIsUploading(false);
    }, 500); // A small delay to ensure loader is visible
  };

  // STEP 5: Generate AI designs with integrated workflow
  const generateDesigns = async () => {
    setIsLoading(true);

    try {
      // Generate unified project seed ONCE for entire project
      const projectSeed = Math.floor(Math.random() * 1000000);

      // Prepare project context for AI
      const projectContext = {
        buildingProgram: projectDetails?.program || 'mixed-use building',
        location: locationData || { address: 'Unknown location' },
        architecturalStyle: styleChoice === 'blend' ? 'Contemporary with local influences' : styleChoice || 'contemporary',
        materials: 'sustainable, local materials',
        siteConstraints: locationData?.zoning?.type || 'urban development',
        userPreferences: `${projectDetails?.area || '200'}m² total area`,
        specifications: projectDetails,
        climateData: locationData?.climate,
        area: projectDetails?.area || '200',
        entranceDirection: projectDetails?.entranceDirection || 'S',
        floorArea: parseInt(projectDetails?.area) || 200,
        // STEP 1: Unified seed for ALL outputs in this project
        projectSeed: projectSeed
      };

      console.log('🎨 Starting integrated AI design generation with:', projectContext);
      console.log('🎲 Project seed for consistent outputs:', projectSeed);
      console.log('⚖️  Material Weight:', materialWeight, '| Characteristic Weight:', characteristicWeight);

      // STEP 5: Check if portfolio images are available
      // Portfolio is only required if blendWeight > 0
      const portfolioImages = (portfolioFiles || [])
        .map(file => file.url || file.preview)
        .filter(Boolean);

      // STEP 5: Use integrated design generation workflow with dual weights
      console.log('🎯 Using integrated design generation with dual weight style blending');
      console.log('📊 Material Weight:', materialWeight, 'Characteristic Weight:', characteristicWeight);
      const aiResult = await aiIntegrationService.generateIntegratedDesign(
        projectContext,
        portfolioImages,
        materialWeight,      // NEW: Pass material weight separately
        characteristicWeight // NEW: Pass characteristic weight separately
      );

      console.log('✅ AI design generation complete:', aiResult);

      // STEP 5: Extract images from integrated design result
      const extractFloorPlanImages = () => {
        const floorPlans = {};

        console.log('📋 Extracting floor plans from aiResult:', {
          hasResults: !!aiResult.results,
          hasFloorPlan: !!aiResult.floorPlan,
          resultsKeys: aiResult.results ? Object.keys(aiResult.results) : []
        });

        // STEP 5: Try integrated design results structure first
        if (aiResult.results?.floorPlans?.floorPlans?.ground?.images) {
          const plans = aiResult.results.floorPlans.floorPlans;
          if (plans.ground?.images) floorPlans.ground = plans.ground.images[0];
          if (plans.upper?.images) floorPlans.upper = plans.upper.images[0];
          if (plans.roof?.images) floorPlans.roof = plans.roof.images[0];
          console.log('✅ Extracted', Object.keys(floorPlans).length, 'floor plans from integrated results');
        }
        // Try direct floorPlans result
        else if (aiResult.floorPlans?.floorPlans?.ground?.images) {
          const plans = aiResult.floorPlans.floorPlans;
          if (plans.ground?.images) floorPlans.ground = plans.ground.images[0];
          if (plans.upper?.images) floorPlans.upper = plans.upper.images[0];
          if (plans.roof?.images) floorPlans.roof = plans.roof.images[0];
          console.log('✅ Extracted', Object.keys(floorPlans).length, 'floor plans from floorPlans');
        }
        // Try visualizations structure
        else if (aiResult.visualizations?.floorPlans?.floorPlans?.ground?.images) {
          const plans = aiResult.visualizations.floorPlans.floorPlans;
          if (plans.ground?.images) floorPlans.ground = plans.ground.images[0];
          if (plans.upper?.images) floorPlans.upper = plans.upper.images[0];
          if (plans.roof?.images) floorPlans.roof = plans.roof.images[0];
          console.log('✅ Extracted', Object.keys(floorPlans).length, 'floor plans from visualizations');
        }

        // Fallback placeholder
        if (!floorPlans.ground) {
          floorPlans.ground = 'https://via.placeholder.com/1024x1024/2C3E50/FFFFFF?text=Floor+Plan+Loading';
          console.log('⚠️ No floor plan found, using placeholder');
        }

        console.log('📋 Final floor plans:', Object.keys(floorPlans));
        return floorPlans;
      };

      const extractElevationsAndSections = () => {
        const drawings = {
          elevations: {},
          sections: {}
        };

        console.log('📐 Extracting technical drawings from aiResult:', {
          hasTechnicalDrawings: !!aiResult.technicalDrawings,
          hasVisualizationsTechnicalDrawings: !!aiResult.visualizations?.technicalDrawings,
          visualizationsKeys: aiResult.visualizations ? Object.keys(aiResult.visualizations) : []
        });

        // Try integrated design results first
        const td = aiResult.results?.technicalDrawings?.technicalDrawings ||
                   aiResult.technicalDrawings?.technicalDrawings ||
                   aiResult.visualizations?.technicalDrawings?.technicalDrawings;

        if (td) {
          console.log('📐 Found technical drawings:', Object.keys(td));

          // Extract elevations
          ['north', 'south', 'east', 'west'].forEach(dir => {
            const key = `elevation_${dir}`;
            if (td[key]?.images && td[key].images.length > 0) {
              drawings.elevations[dir] = td[key].images[0];
              console.log(`✅ Extracted ${dir} elevation`);
            } else if (td[key]?.isFallback) {
              drawings.elevations[dir] = `https://via.placeholder.com/1024x768/8B4513/FFFFFF?text=${dir.charAt(0).toUpperCase() + dir.slice(1)}+Elevation`;
              console.log(`⚠️ Using fallback for ${dir} elevation`);
            }
          });

          // Extract sections
          ['longitudinal', 'cross'].forEach(type => {
            const key = `section_${type}`;
            if (td[key]?.images && td[key].images.length > 0) {
              drawings.sections[type] = td[key].images[0];
              console.log(`✅ Extracted ${type} section`);
            } else if (td[key]?.isFallback) {
              drawings.sections[type] = `https://via.placeholder.com/1024x768/F5A623/FFFFFF?text=${type.charAt(0).toUpperCase() + type.slice(1)}+Section`;
              console.log(`⚠️ Using fallback for ${type} section`);
            }
          });
        }

        // Add at least one fallback if nothing was extracted
        if (Object.keys(drawings.elevations).length === 0) {
          drawings.elevations.north = 'https://via.placeholder.com/1024x768/8B4513/FFFFFF?text=Elevation+Loading';
          console.log('⚠️ No elevations found, using placeholder');
        }
        if (Object.keys(drawings.sections).length === 0) {
          drawings.sections.longitudinal = 'https://via.placeholder.com/1024x768/F5A623/FFFFFF?text=Section+Loading';
          console.log('⚠️ No sections found, using placeholder');
        }

        console.log('📐 Final technical drawings:', {
          elevations: Object.keys(drawings.elevations),
          sections: Object.keys(drawings.sections)
        });
        return drawings;
      };

      const extract3DImages = () => {
        const images = [];

        console.log('🔍 Checking aiResult structure:', {
          hasResults: !!aiResult.results,
          hasPreview3D: !!aiResult.preview3D,
          hasBIMAxonometric: !!aiResult.bimAxonometric,
          resultsKeys: aiResult.results ? Object.keys(aiResult.results) : []
        });

        // STEP 5: Try integrated design results structure first
        if (aiResult.results?.views) {
          const views = aiResult.results.views;
          if (views.exterior_front?.images) images.push(...views.exterior_front.images);
          if (views.exterior_side?.images) images.push(...views.exterior_side.images);
          if (views.interior?.images) images.push(...views.interior.images);
          // Use BIM-derived axonometric instead of Replicate-generated one
          if (aiResult.bimAxonometric) {
            images.push(aiResult.bimAxonometric);
            console.log('✅ Using BIM-derived axonometric view (geometrically consistent)');
          } else if (views.axonometric?.images) {
            images.push(...views.axonometric.images);
            console.log('⚠️ Using Replicate axonometric (BIM not available)');
          }
          if (views.perspective?.images) images.push(...views.perspective.images);
          console.log('✅ Extracted', images.length, '3D views from integrated results.views');
        }
        // Try visualizations.views structure
        else if (aiResult.visualizations?.views) {
          const views = aiResult.visualizations.views;
          if (views.exterior_front?.images) images.push(...views.exterior_front.images);
          if (views.exterior_side?.images) images.push(...views.exterior_side.images);
          if (views.interior?.images) images.push(...views.interior.images);
          // Use BIM-derived axonometric from visualizations
          if (aiResult.visualizations.axonometric) {
            images.push(aiResult.visualizations.axonometric);
            console.log('✅ Using BIM-derived axonometric from visualizations');
          } else if (views.axonometric?.images) {
            images.push(...views.axonometric.images);
          }
          if (views.perspective?.images) images.push(...views.perspective.images);
          console.log('✅ Extracted', images.length, '3D views from visualizations');
        }
        // Try direct preview3D result
        else if (aiResult.preview3D?.preview3D?.images) {
          images.push(...aiResult.preview3D.preview3D.images);
          console.log('✅ Extracted 3D preview from preview3D.preview3D');
        }

        // Fallback placeholder if no images found
        if (images.length === 0) {
          images.push('https://via.placeholder.com/1024x768/34495e/ffffff?text=3D+Preview+Loading');
          console.log('⚠️ No 3D images found, using placeholder');
        }

        return images;
      };

      const floorPlanImages = extractFloorPlanImages();
      const technicalDrawings = extractElevationsAndSections();
      const preview3DImages = extract3DImages();

      console.log('📊 Extracted floor plan images:', floorPlanImages);
      console.log('📊 Extracted elevations and sections:', technicalDrawings);
      console.log('📊 Extracted 3D preview images:', preview3DImages);

      // Transform AI results to existing structure
      const designData = {
        floorPlan: {
          rooms: aiResult.reasoning?.spatialOrganization ?
            extractRoomsFromReasoning(aiResult.reasoning.spatialOrganization) :
            [
              { name: "Main Space", area: `${Math.floor((parseInt(projectDetails?.area) || 200) * 0.4)}m²` },
              { name: "Secondary Spaces", area: `${Math.floor((parseInt(projectDetails?.area) || 200) * 0.3)}m²` },
              { name: "Support Areas", area: `${Math.floor((parseInt(projectDetails?.area) || 200) * 0.2)}m²` },
              { name: "Circulation", area: `${Math.floor((parseInt(projectDetails?.area) || 200) * 0.1)}m²` }
            ],
          efficiency: "85%",
          circulation: aiResult.reasoning?.spatialOrganization || "Optimized circulation flow",
          // Add multi-level floor plan images
          levels: floorPlanImages,
          floorCount: aiResult.floorPlans?.floorCount || (floorPlanImages.upper ? 2 : 1)
        },
        technicalDrawings: technicalDrawings,
        model3D: {
          style: aiResult.reasoning?.designPhilosophy || `${styleChoice} architectural design`,
          features: extractFeatures(aiResult.reasoning?.environmentalConsiderations),
          materials: aiResult.reasoning?.materialRecommendations?.split(',').map(m => m.trim()) || ["Sustainable materials", "Local stone", "Glass", "Steel"],
          sustainabilityFeatures: extractSustainabilityFeatures(aiResult.reasoning?.environmentalConsiderations),
          // Add 3D preview images if available
          images: preview3DImages
        },
        technical: {
          structural: aiResult.reasoning?.materialRecommendations || "Modern structural system",
          foundation: "Engineered foundation system",
          mep: {
            hvac: "Energy-efficient HVAC system",
            electrical: "Smart LED lighting with sensors",
            plumbing: "Water-efficient fixtures"
          },
          compliance: ["Local building codes", "Accessibility standards", "Energy efficiency requirements"]
        },
        cost: {
          construction: aiResult.feasibility?.cost || "To be determined",
          timeline: aiResult.feasibility?.timeline || "12-18 months",
          energySavings: "Estimated based on sustainability features"
        },
        aiMetadata: {
          generated: true,
          timestamp: aiResult.timestamp,
          workflow: aiResult.workflow,
          isFallback: aiResult.isFallback
        },
        // Add new features
        styleDetection: aiResult.styleDetection || null,
        compatibilityAnalysis: aiResult.compatibilityAnalysis || null,
        visualizations: aiResult.visualizations || null,
        // Add style rationale from enhanced OpenAI response
        styleRationale: aiResult.reasoning?.styleRationale || null,
        // Add BIM model from integrated design generation
        bimModel: aiResult.bimModel || null
      };

      setGeneratedDesigns(designData);
      setIsLoading(false);
      setCurrentStep(5);

    } catch (error) {
      console.error('❌ AI generation error:', error);

      // Fallback to mock data if AI fails
      setGeneratedDesigns({
        floorPlan: {
          rooms: [
            { name: "Reception", area: "25m²" },
            { name: "Main Space", area: "100m²" },
            { name: "Support Areas", area: "50m²" },
            { name: "Circulation", area: "25m²" }
          ],
          efficiency: "85%",
          circulation: "Optimized circulation flow"
        },
        model3D: {
          style: `${styleChoice} architectural design`,
          features: ["Natural lighting", "Sustainable design", "Modern aesthetics"],
          materials: ["Sustainable materials", "Local resources"],
          sustainabilityFeatures: ["Energy efficient", "Eco-friendly"],
          images: []
        },
        technical: {
          structural: "Modern structural system",
          foundation: "Engineered foundation",
          mep: {
            hvac: "Energy-efficient system",
            electrical: "Smart lighting",
            plumbing: "Water-efficient fixtures"
          },
          compliance: ["Building codes", "Accessibility", "Energy standards"]
        },
        cost: {
          construction: "Contact for estimate",
          timeline: "12-18 months",
          energySavings: "Significant"
        },
        aiMetadata: {
          generated: false,
          error: error.message,
          fallback: true
        }
      });
      setIsLoading(false);
      setCurrentStep(5);
    }
  };

  // Helper functions to extract data from AI responses
  const extractRoomsFromReasoning = (spatialText) => {
    // Simple extraction - can be enhanced
    const totalArea = parseInt(projectDetails?.area) || 200;
    return [
      { name: "Main Space", area: `${Math.floor(totalArea * 0.4)}m²` },
      { name: "Secondary Spaces", area: `${Math.floor(totalArea * 0.3)}m²` },
      { name: "Support Areas", area: `${Math.floor(totalArea * 0.2)}m²` },
      { name: "Circulation", area: `${Math.floor(totalArea * 0.1)}m²` }
    ];
  };

  const extractFeatures = (envText) => {
    return [
      "Optimized natural lighting",
      "Sustainable design principles",
      "Climate-responsive architecture",
      "Modern aesthetic"
    ];
  };

  const extractSustainabilityFeatures = (envText) => {
    return [
      "Energy-efficient design",
      "Sustainable materials",
      "Environmental optimization",
      "Green building principles"
    ];
  };

  const renderLandingPage = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0">
        <div className="absolute top-20 left-20 w-72 h-72 bg-blue-500 rounded-full opacity-10 blur-3xl animate-pulse"></div>
        <div className="absolute bottom-20 right-20 w-96 h-96 bg-purple-500 rounded-full opacity-10 blur-3xl animate-pulse delay-1000"></div>
      </div>

      <div className="relative z-10 max-w-7xl mx-auto px-4 py-16">
        <div id="hero-content" className="opacity-0 transition-opacity duration-1000">
          {/* Header */}
          <div className="text-center mb-16">
            <div className="flex justify-center items-center mb-6">
              <Building className="w-12 h-12 text-blue-400 mr-3" />
              <h1 className="text-5xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                ArchitectAI Platform
              </h1>
            </div>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              Transform any location into intelligent architectural designs in minutes, not months.
              AI-powered design generation with full technical documentation.
            </p>
          </div>

          {/* Key Metrics */}
          <div className="grid md:grid-cols-4 gap-6 mb-16">
            {[
              { icon: Clock, label: "Design Time", value: "5 minutes", subtext: "vs 2-3 weeks traditional" },
              { icon: TrendingUp, label: "Cost Reduction", value: "85%", subtext: "in design phase costs" },
              { icon: Users, label: "Active Architects", value: "2,450+", subtext: "using our platform" },
              { icon: BarChart3, label: "Projects Created", value: "12,000+", subtext: "successful designs" }
            ].map((metric, idx) => (
              <div key={idx} className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
                <metric.icon className="w-8 h-8 text-blue-400 mb-3" />
                <h3 className="text-3xl font-bold mb-1">{metric.value}</h3>
                <p className="text-sm text-gray-300">{metric.label}</p>
                <p className="text-xs text-gray-400 mt-1">{metric.subtext}</p>
              </div>
            ))}
          </div>

          {/* Feature Grid */}
          <div className="grid md:grid-cols-3 gap-8 mb-16">
            {[
              {
                icon: MapPin,
                title: "Location Intelligence",
                description: "Analyze climate, zoning, and local architecture to inform optimal design decisions"
              },
              {
                icon: Sparkles,
                title: "AI Design Generation",
                description: "Create complete 2D/3D designs from requirements in minutes with style synthesis"
              },
              {
                icon: FileCode,
                title: "Technical Documentation",
                description: "Auto-generate all structural and MEP drawings with code compliance"
              },
              {
                icon: Palette,
                title: "Style Blending",
                description: "Seamlessly blend architect portfolios with location-appropriate styles"
              },
              {
                icon: Zap,
                title: "Real-time Modifications",
                description: "Use natural language to instantly modify designs and see results"
              },
              {
                icon: Shield,
                title: "Industry Standards",
                description: "Export to all major CAD formats: DWG, RVT, IFC with full compatibility"
              }
            ].map((feature, idx) => (
              <div key={idx} className="bg-white/5 backdrop-blur rounded-xl p-6 border border-white/10 hover:bg-white/10 transition-all duration-300">
                <feature.icon className="w-10 h-10 text-blue-400 mb-4" />
                <h3 className="text-lg font-semibold mb-2">{feature.title}</h3>
                <p className="text-sm text-gray-300">{feature.description}</p>
              </div>
            ))}
          </div>

          {/* CTA Section */}
          <div className="text-center">
            <button
              onClick={() => setCurrentStep(1)}
              className="group bg-gradient-to-r from-blue-500 to-purple-500 text-white px-8 py-4 rounded-full font-semibold text-lg hover:shadow-2xl hover:shadow-blue-500/25 transition-all duration-300 flex items-center mx-auto"
            >
              <span>Start Live Demo</span>
              <ArrowRight className="ml-2 group-hover:translate-x-1 transition-transform" />
            </button>
            <p className="text-sm text-gray-400 mt-4">No login required • 5-minute walkthrough</p>
          </div>
        </div>
      </div>
    </div>
  );

  const renderStep = () => {
    switch(currentStep) {
      case 0:
        return renderLandingPage();

      case 1:
        return (
          <div className="space-y-6 animate-fadeIn">
            <div className="bg-white rounded-2xl shadow-xl p-8">
              <div className="flex items-center mb-6">
                <div className="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center mr-4">
                  <MapPin className="w-6 h-6 text-blue-600" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-gray-800">Location Analysis</h2>
                  <p className="text-gray-600">Enter the project address to begin intelligent site analysis</p>
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Project Address</label>
                  <div className="relative">
                    <input
                      type="text"
                      placeholder={isDetectingLocation ? "Detecting your location..." : "Enter full address or let us detect your location..."}
                      className="w-full px-4 py-3 pr-12 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none transition-colors"
                      value={address}
                      onChange={(e) => setAddress(e.target.value)}
                      onKeyDown={(e) => {
                        if (e.key === 'Enter') {
                          analyzeLocation();
                        }
                      }}
                      disabled={isDetectingLocation}
                    />
                    {isDetectingLocation && (
                      <div className="absolute right-3 top-1/2 -translate-y-1/2">
                        <Loader2 className="w-5 h-5 animate-spin text-blue-600" />
                      </div>
                    )}
                  </div>
                  {!address && !isDetectingLocation && (
                    <div className="mt-2 flex items-center justify-between">
                      <p className="text-sm text-gray-500">We'll automatically detect your location when you start</p>
                      <button
                        onClick={detectUserLocation}
                        className="text-blue-600 hover:text-blue-700 text-sm font-medium flex items-center"
                      >
                        <MapPin className="w-4 h-4 mr-1" />
                        Detect Location
                      </button>
                    </div>
                  )}
                </div>

                <div className="bg-blue-50 rounded-xl p-4">
                  <h4 className="font-medium text-blue-900 mb-2 flex items-center">
                    <Cpu className="w-4 h-4 mr-2" />
                    AI will analyze:
                  </h4>
                  <div className="grid grid-cols-2 gap-2 text-sm text-blue-800">
                    <div className="flex items-center"><Check className="w-4 h-4 mr-1" /> Climate patterns</div>
                    <div className="flex items-center"><Check className="w-4 h-4 mr-1" /> Solar orientation</div>
                    <div className="flex items-center"><Check className="w-4 h-4 mr-1" /> Local architecture</div>
                    <div className="flex items-center"><Check className="w-4 h-4 mr-1" /> Zoning regulations</div>
                  </div>
                </div>

                <button
                  onClick={analyzeLocation}
                  className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white px-6 py-4 rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-300 flex items-center justify-center font-medium"
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="mr-2 animate-spin" />
                      Analyzing Location Data...
                    </>
                  ) : (
                    <>
                      <Compass className="mr-2" />
                      Analyze Location
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <ErrorBoundary>
            <div className="space-y-6 animate-fadeIn">
              <div className="bg-white rounded-2xl shadow-xl p-8">
                <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-800">Location Intelligence Report</h2>
                <div className="flex items-center bg-green-100 px-4 py-2 rounded-full">
                  <Check className="w-5 h-5 text-green-600 mr-2" />
                  <span className="text-green-700 font-medium">Analysis Complete</span>
                </div>
              </div>
              
              <div className="grid lg:grid-cols-3 gap-6">
                {/* Climate & Environment */}
                <div className="bg-gradient-to-br from-blue-50 to-cyan-50 rounded-xl p-6">
                  <div className="flex items-center mb-4">
                    <Sun className="w-6 h-6 text-orange-500 mr-2" />
                    <h3 className="font-semibold text-gray-800">Solar & Climate Analysis</h3>
                  </div>
                  <div className="space-y-3">
                    <div>
                      <p className="text-sm text-gray-600">Climate Type</p>
                      <p className="font-medium">{locationData?.climate.type}</p>
                    </div>
                    <div className="grid grid-cols-2 gap-3 mt-2">
                      {locationData?.climate.seasonal.winter && <div className="bg-white/60 rounded-lg p-3">
                        <h4 className="font-semibold text-sm text-blue-800">Winter</h4>
                        <p className="text-xs text-gray-600 mt-1">Temp: {locationData.climate.seasonal.winter.avgTemp}</p>
                        <p className="text-xs text-gray-600">Precip: {locationData.climate.seasonal.winter.precipitation}</p>
                        <p className="text-xs text-gray-600">Solar: {locationData.climate.seasonal.winter.solar}</p>
                      </div>}
                      {locationData?.climate.seasonal.spring && <div className="bg-white/60 rounded-lg p-3">
                        <h4 className="font-semibold text-sm text-green-800">Spring</h4>
                        <p className="text-xs text-gray-600 mt-1">Temp: {locationData.climate.seasonal.spring.avgTemp}</p>
                        <p className="text-xs text-gray-600">Precip: {locationData.climate.seasonal.spring.precipitation}</p>
                        <p className="text-xs text-gray-600">Solar: {locationData.climate.seasonal.spring.solar}</p>
                      </div>}
                      {locationData?.climate.seasonal.summer && <div className="bg-white/60 rounded-lg p-3">
                        <h4 className="font-semibold text-sm text-red-800">Summer</h4>
                        <p className="text-xs text-gray-600 mt-1">Temp: {locationData.climate.seasonal.summer.avgTemp}</p>
                        <p className="text-xs text-gray-600">Precip: {locationData.climate.seasonal.summer.precipitation}</p>
                        <p className="text-xs text-gray-600">Solar: {locationData.climate.seasonal.summer.solar}</p>
                      </div>}
                      {locationData?.climate.seasonal.fall && <div className="bg-white/60 rounded-lg p-3">
                        <h4 className="font-semibold text-sm text-orange-800">Fall</h4>
                        <p className="text-xs text-gray-600 mt-1">Temp: {locationData.climate.seasonal.fall.avgTemp}</p>
                        <p className="text-xs text-gray-600">Precip: {locationData.climate.seasonal.fall.precipitation}</p>
                        <p className="text-xs text-gray-600">Solar: {locationData.climate.seasonal.fall.solar}</p>
                      </div>}
                    </div>
                    <div className="pt-2 border-t border-blue-100">
                      <p className="text-sm text-gray-600">Est. Sunrise / Sunset</p>
                      <p className="font-medium text-sm">Summer: {locationData?.sunPath.summer}, Winter: {locationData?.sunPath.winter}</p>
                    </div>
                  </div>
                </div>

                {/* Zoning & Regulations */}
                <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl p-6">
                  <div className="flex items-center mb-4">
                    <Building className="w-6 h-6 text-purple-600 mr-2" />
                    <h3 className="font-semibold text-gray-800">Zoning & Architecture</h3>
                  </div>
                  <div className="space-y-3">
                    <div>
                      <p className="text-sm text-gray-600">Zoning Type</p>
                      <p className="font-medium">{locationData?.zoning.type}</p>
                      {locationData?.zoning.note && (
                        <p className="text-xs text-gray-500 italic mt-1">{locationData.zoning.note}</p>
                      )}
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Max Height Allowed</p>
                      <p className="font-medium">{locationData?.zoning.maxHeight}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Density</p>
                      <p className="font-medium">{locationData?.zoning.density}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Setbacks</p>
                      <p className="font-medium text-sm">{locationData?.zoning.setbacks}</p>
                    </div>
                    {locationData?.zoning.characteristics && (
                      <div>
                        <p className="text-sm text-gray-600">Characteristics</p>
                        <p className="font-medium text-sm">{locationData.zoning.characteristics}</p>
                      </div>
                    )}
                    {locationData?.zoning.materials && (
                      <div>
                        <p className="text-sm text-gray-600">Typical Materials</p>
                        <p className="font-medium text-sm">{locationData.zoning.materials}</p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Market Context */}
                <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl p-6">
                  <div className="flex items-center mb-4">
                    <TrendingUp className="w-6 h-6 text-green-600 mr-2" />
                    <h3 className="font-semibold text-gray-800">Market Analysis</h3>
                  </div>
                  <div className="space-y-3">
                    <div>
                      <p className="text-sm text-gray-600">Construction Cost</p>
                      <p className="font-medium">{locationData?.marketContext.avgConstructionCost}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Market Demand</p>
                      <p className="font-medium">{locationData?.marketContext.demandIndex}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Expected ROI</p>
                      <p className="font-medium text-green-600">{locationData?.marketContext.roi}</p>
                    </div>
                    <div className="pt-2 border-t border-green-100">
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600">Investment Grade</span>
                        <div className="flex">
                          {[1,2,3,4,5].map((star) => (
                            <div key={star} className={`w-5 h-5 ${star <= 4 ? 'text-yellow-400' : 'text-gray-300'}`}>★</div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Interactive 3D Map Preview */}
              <div className="mt-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                    <MapPin className="w-5 h-5 text-blue-600 mr-2" />
                    3D Location View
                  </h3>
                  <div className="text-sm text-gray-600">{locationData?.address}</div>
                </div>
                <div className="bg-gray-100 rounded-xl h-80 relative overflow-hidden shadow-lg border-2 border-gray-200">
                  {locationData?.coordinates ? (
                    <>
                      <MapView center={locationData.coordinates} zoom={19} />
                      <div className="absolute top-4 left-4 bg-white/90 backdrop-blur px-3 py-2 rounded-lg shadow-sm">
                        <div className="flex items-center text-sm font-medium text-gray-700">
                          <div className="w-3 h-3 bg-blue-600 rounded-full mr-2 animate-pulse"></div>
                          Project Site
                        </div>
                      </div>
                      <div className="absolute bottom-4 right-4 bg-white/90 backdrop-blur px-3 py-2 rounded-lg shadow-sm">
                        <div className="text-xs text-gray-600">
                          Lat: {locationData.coordinates.lat.toFixed(6)}<br/>
                          Lng: {locationData.coordinates.lng.toFixed(6)}
                        </div>
                      </div>
                    </>
                  ) : (
                    <div className="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-blue-50 to-gray-100">
                      <div className="text-center">
                        <MapPin className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-600">3D map will appear after location analysis</p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
              
              <button
                onClick={() => setCurrentStep(3)}
                className="mt-6 w-full bg-gradient-to-r from-purple-600 to-purple-700 text-white px-6 py-4 rounded-xl hover:from-purple-700 hover:to-purple-800 transition-all duration-300 font-medium"
              >
                Continue to Portfolio Upload
              </button>
            </div>
          </div>
        </ErrorBoundary>
        );

      case 3:
        return (
          <div className="space-y-6 animate-fadeIn">
            <div className="bg-white rounded-2xl shadow-xl p-8">
              <div className="flex items-center mb-6">
                <div className="w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center mr-4">
                  <Palette className="w-6 h-6 text-purple-600" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-gray-800">Portfolio & Style Selection</h2>
                  <p className="text-gray-600">Upload your portfolio to personalize the AI design generation</p>
                </div>
              </div>
              
              <div className="space-y-6">
                {/* Portfolio Upload */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">Upload Portfolio Files</label>
                  <input
                    ref={fileInputRef}
                    type="file"
                    multiple
                    accept="image/*,.pdf"
                    onChange={handlePortfolioUpload}
                    className="hidden"
                  />
                  <div
                    onClick={() => !isUploading && fileInputRef.current?.click()}
                    className={`border-2 border-dashed border-gray-300 rounded-xl p-8 text-center transition-all duration-300 ${
                      isUploading ? 'cursor-wait bg-purple-50' : 'cursor-pointer hover:border-purple-500 hover:bg-purple-50'
                    }`}
                  >
                    {isUploading ? (
                      <div className="flex flex-col items-center justify-center">
                        <Loader2 className="w-12 h-12 text-purple-600 mx-auto mb-4 animate-spin" />
                        <p className="text-gray-700 font-medium">Processing files...</p>
                        <p className="text-sm text-gray-500 mt-1">Please wait</p>
                      </div>
                    ) : (
                      <>
                        <Upload className="w-12 h-12 text-gray-400 mx-auto mb-3" />
                        <p className="text-gray-700 font-medium">Click to upload portfolio files</p>
                        <p className="text-sm text-gray-500 mt-1">Support: JPG, PNG, PDF (Max 50MB)</p>
                      </>
                    )}
                  </div>
                  
                  {portfolioFiles.length > 0 && (
                    <div className="mt-4 space-y-2">
                      {portfolioFiles.map((file, idx) => (
                        <div key={idx} className="flex items-center justify-between p-3 bg-purple-50 rounded-lg">
                          <div className="flex items-center">
                            <FileText className="w-5 h-5 text-purple-600 mr-3" />
                            <div>
                              <p className="font-medium text-gray-800">{file.name}</p>
                              <p className="text-xs text-gray-600">{file.size}</p>
                            </div>
                          </div>
                          <Check className="w-5 h-5 text-green-600" />
                        </div>
                      ))}
                    </div>
                  )}
                </div>
                
                {/* STEP 5: Style Blend Weight Slider */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Advanced Style Blending Controls
                  </label>
                  <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6">

                    {/* Material Weight Slider */}
                    <div className="mb-6">
                      <div className="flex justify-between items-center mb-3">
                        <h5 className="font-medium text-gray-700 flex items-center">
                          <Layers className="w-4 h-4 text-green-600 mr-2" />
                          Material Palette
                        </h5>
                        <span className="text-sm px-3 py-1 bg-white rounded-full border border-gray-200">
                          {Math.round((1-materialWeight)*100)}% Local / {Math.round(materialWeight*100)}% Portfolio
                        </span>
                      </div>

                      <div className="flex justify-between text-xs text-gray-600 mb-2">
                        <span>Local Materials</span>
                        <span>Portfolio Materials</span>
                      </div>

                      <input
                        type="range"
                        min="0"
                        max="100"
                        value={materialWeight * 100}
                        onChange={(e) => setMaterialWeight(e.target.value / 100)}
                        className="w-full h-2 bg-gradient-to-r from-green-400 to-blue-400 rounded-lg appearance-none cursor-pointer slider"
                        style={{
                          background: `linear-gradient(to right, #4ade80 0%, #4ade80 ${(1-materialWeight)*100}%, #60a5fa ${(1-materialWeight)*100}%, #60a5fa 100%)`
                        }}
                      />

                      {/* Material Preview */}
                      <div className="mt-3 p-3 bg-white/70 rounded-lg">
                        <p className="text-xs text-gray-500 mb-1">Current Selection:</p>
                        <p className="text-sm text-gray-700">
                          {materialWeight < 0.2 && locationData?.recommendedStyle ?
                            `Local materials: ${locationData.recommendedStyle.includes('tropical') ? 'Bamboo, teak, coral stone' :
                              locationData.recommendedStyle.includes('desert') ? 'Adobe, sandstone, stucco' :
                              'Brick, timber, local stone'}` :
                          materialWeight < 0.5 ?
                            "Blend of local materials with portfolio preferences" :
                          materialWeight < 0.8 ?
                            "Portfolio materials adapted to local availability" :
                            "Portfolio signature materials: Glass, steel, concrete"}
                        </p>
                      </div>
                    </div>

                    {/* Characteristic Weight Slider */}
                    <div className="mb-6">
                      <div className="flex justify-between items-center mb-3">
                        <h5 className="font-medium text-gray-700 flex items-center">
                          <Palette className="w-4 h-4 text-purple-600 mr-2" />
                          Design Characteristics
                        </h5>
                        <span className="text-sm px-3 py-1 bg-white rounded-full border border-gray-200">
                          {Math.round((1-characteristicWeight)*100)}% Local / {Math.round(characteristicWeight*100)}% Portfolio
                        </span>
                      </div>

                      <div className="flex justify-between text-xs text-gray-600 mb-2">
                        <span>Local Patterns</span>
                        <span>Portfolio Style</span>
                      </div>

                      <input
                        type="range"
                        min="0"
                        max="100"
                        value={characteristicWeight * 100}
                        onChange={(e) => setCharacteristicWeight(e.target.value / 100)}
                        className="w-full h-2 bg-gradient-to-r from-purple-400 to-pink-400 rounded-lg appearance-none cursor-pointer slider"
                        style={{
                          background: `linear-gradient(to right, #a78bfa 0%, #a78bfa ${(1-characteristicWeight)*100}%, #ec4899 ${(1-characteristicWeight)*100}%, #ec4899 100%)`
                        }}
                      />

                      {/* Characteristic Preview */}
                      <div className="mt-3 p-3 bg-white/70 rounded-lg">
                        <p className="text-xs text-gray-500 mb-1">Current Selection:</p>
                        <p className="text-sm text-gray-700">
                          {characteristicWeight < 0.2 && locationData?.recommendedStyle ?
                            `Local patterns: ${locationData.recommendedStyle.includes('colonial') ? 'Symmetry, columns, shutters' :
                              locationData.recommendedStyle.includes('modern') ? 'Clean lines, open plans, minimalism' :
                              'Traditional forms, regional motifs'}` :
                          characteristicWeight < 0.5 ?
                            "Fusion of local and portfolio design elements" :
                          characteristicWeight < 0.8 ?
                            "Portfolio style with local influences" :
                            "Portfolio signature: Contemporary, geometric, bold"}
                        </p>
                      </div>
                    </div>

                    {/* Combined Style Analysis */}
                    <div className="mt-4 p-4 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg border border-indigo-200">
                      <h5 className="font-medium text-gray-700 mb-2 flex items-center">
                        <Sparkles className="w-4 h-4 text-indigo-600 mr-2" />
                        Resulting Design Direction
                      </h5>
                      <p className="text-sm text-gray-600">
                        {(() => {
                          const avgWeight = (materialWeight + characteristicWeight) / 2;
                          if (avgWeight < 0.2) return "Fully localized design respecting regional traditions and climate";
                          if (avgWeight < 0.4) return "Local architecture with subtle portfolio influences";
                          if (avgWeight < 0.6) return "Balanced fusion creating unique contextual design";
                          if (avgWeight < 0.8) return "Portfolio-driven design adapted to local context";
                          return "Strong portfolio signature with site-specific adaptations";
                        })()}
                      </p>
                      <div className="mt-3 grid grid-cols-2 gap-2 text-xs">
                        <div className="bg-white/60 rounded px-2 py-1">
                          <span className="text-gray-500">Materials:</span>
                          <span className="ml-1 font-medium">{Math.round(materialWeight * 100)}% Portfolio</span>
                        </div>
                        <div className="bg-white/60 rounded px-2 py-1">
                          <span className="text-gray-500">Style:</span>
                          <span className="ml-1 font-medium">{Math.round(characteristicWeight * 100)}% Portfolio</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Portfolio requirement indicator */}
                  {(materialWeight > 0 || characteristicWeight > 0) && portfolioFiles.length === 0 && (
                    <div className="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg flex items-start">
                      <AlertCircle className="w-5 h-5 text-yellow-600 mr-2 flex-shrink-0 mt-0.5" />
                      <p className="text-sm text-yellow-800">
                        Portfolio upload required for blend weights above 0%. Upload images above to use portfolio styling.
                      </p>
                    </div>
                  )}
                </div>

                {/* AI Analysis Preview */}
                {portfolioFiles.length > 0 && (
                  <div className="bg-gradient-to-r from-purple-100 to-pink-100 rounded-xl p-6">
                    <h4 className="font-semibold text-gray-800 mb-3 flex items-center">
                      <Sparkles className="w-5 h-5 text-purple-600 mr-2" />
                      AI Portfolio Analysis Preview
                    </h4>
                    <div className="grid grid-cols-3 gap-3 text-sm">
                      <div className="bg-white/70 rounded-lg p-3">
                        <p className="text-gray-600 text-xs">Detected Style</p>
                        <p className="font-medium">Contemporary</p>
                      </div>
                      <div className="bg-white/70 rounded-lg p-3">
                        <p className="text-gray-600 text-xs">Color Palette</p>
                        <p className="font-medium">Neutral Tones</p>
                      </div>
                      <div className="bg-white/70 rounded-lg p-3">
                        <p className="text-gray-600 text-xs">Signature Elements</p>
                        <p className="font-medium">Clean Lines</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
              
              <button
                onClick={() => setCurrentStep(4)}
                className="mt-6 w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-4 rounded-xl hover:from-purple-700 hover:to-pink-700 transition-all duration-300 font-medium disabled:opacity-50"
                disabled={portfolioFiles.length === 0}
              >
                Continue to Project Details
              </button>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6 animate-fadeIn">
            <div className="bg-white rounded-2xl shadow-xl p-8">
              <div className="flex items-center mb-6">
                <div className="w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center mr-4">
                  <Square className="w-6 h-6 text-green-600" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-gray-800">Project Specifications</h2>
                  <p className="text-gray-600">Define your project requirements for AI generation</p>
                </div>
              </div>
              
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="total-surface-area" className="block text-sm font-medium text-gray-700 mb-2">Total Surface Area</label>
                  <div className="relative">
                    <input
                      id="total-surface-area"
                      type="number"
                      placeholder="500"
                      value={projectDetails.area}
                      onChange={(e) => setProjectDetails({...projectDetails, area: e.target.value})}
                      className="w-full px-4 py-3 pr-12 border-2 border-gray-200 rounded-xl focus:border-green-500 focus:outline-none transition-colors"
                    />
                    <span className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-500">m²</span>
                  </div>
                </div>
                
                <div>
                  <label htmlFor="building-program" className="block text-sm font-medium text-gray-700 mb-2">Building Program</label>
                  <select
                    id="building-program"
                    value={projectDetails.program}
                    onChange={(e) => setProjectDetails({...projectDetails, program: e.target.value})}
                    className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-green-500 focus:outline-none transition-colors"
                  >
                    <option value="">Select program type...</option>

                    <optgroup label="🏡 Residential - Houses">
                      <option value="detached-house">Detached House (Single-family)</option>
                      <option value="semi-detached-house">Semi-detached House (Duplex)</option>
                      <option value="terraced-house">Terraced House (Townhouse)</option>
                      <option value="villa">Villa (Luxury Detached)</option>
                      <option value="cottage">Cottage (Small Detached)</option>
                    </optgroup>

                    <optgroup label="🏢 Residential - Multi-family">
                      <option value="apartment-building">Apartment Building</option>
                      <option value="condominium">Condominium Complex</option>
                      <option value="residential-tower">Residential Tower</option>
                    </optgroup>

                    <optgroup label="🏥 Healthcare">
                      <option value="clinic">Medical Clinic</option>
                      <option value="dental-clinic">Dental Clinic</option>
                      <option value="health-center">Health Center</option>
                      <option value="pharmacy">Pharmacy</option>
                    </optgroup>

                    <optgroup label="🏢 Commercial">
                      <option value="office">Office Building</option>
                      <option value="coworking">Coworking Space</option>
                      <option value="retail">Retail Space</option>
                      <option value="shopping-center">Shopping Center</option>
                      <option value="restaurant">Restaurant</option>
                      <option value="cafe">Café</option>
                    </optgroup>

                    <optgroup label="🎓 Educational">
                      <option value="school">School</option>
                      <option value="kindergarten">Kindergarten</option>
                      <option value="training-center">Training Center</option>
                      <option value="library">Library</option>
                    </optgroup>

                    <optgroup label="🏨 Hospitality">
                      <option value="hotel">Hotel</option>
                      <option value="hostel">Hostel</option>
                      <option value="bed-breakfast">Bed & Breakfast</option>
                    </optgroup>

                    <optgroup label="🏛️ Public & Cultural">
                      <option value="community-center">Community Center</option>
                      <option value="museum">Museum</option>
                      <option value="gallery">Art Gallery</option>
                      <option value="theater">Theater</option>
                    </optgroup>

                    <optgroup label="🏋️ Sports & Recreation">
                      <option value="gym">Gym / Fitness Center</option>
                      <option value="sports-hall">Sports Hall</option>
                      <option value="swimming-pool">Swimming Pool Complex</option>
                    </optgroup>
                  </select>
                </div>

                <div>
                  <label htmlFor="entrance-direction" className="block text-sm font-medium text-gray-700 mb-2">
                    <Compass className="w-4 h-4 inline mr-1" />
                    Principal Entrance Direction
                  </label>
                  <select
                    id="entrance-direction"
                    value={projectDetails.entranceDirection}
                    onChange={(e) => setProjectDetails({...projectDetails, entranceDirection: e.target.value})}
                    className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-green-500 focus:outline-none transition-colors"
                  >
                    <option value="">Select entrance orientation...</option>
                    <option value="N">⬆️ North (N)</option>
                    <option value="NE">↗️ North-East (NE)</option>
                    <option value="E">➡️ East (E)</option>
                    <option value="SE">↘️ South-East (SE)</option>
                    <option value="S">⬇️ South (S)</option>
                    <option value="SW">↙️ South-West (SW)</option>
                    <option value="W">⬅️ West (W)</option>
                    <option value="NW">↖️ North-West (NW)</option>
                  </select>
                  {projectDetails.entranceDirection && (
                    <p className="mt-2 text-sm text-gray-600">
                      <Sun className="w-4 h-4 inline mr-1 text-yellow-500" />
                      {projectDetails.entranceDirection === 'S' || projectDetails.entranceDirection === 'SE' || projectDetails.entranceDirection === 'SW'
                        ? 'Good solar exposure - Optimal for passive solar heating'
                        : projectDetails.entranceDirection === 'N' || projectDetails.entranceDirection === 'NE' || projectDetails.entranceDirection === 'NW'
                        ? 'Limited solar exposure - Consider additional lighting'
                        : 'Moderate solar exposure - Balanced lighting conditions'}
                    </p>
                  )}
                </div>
              </div>

              {projectDetails.program && (
                <div className="mt-6 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl p-6">
                  <h4 className="font-semibold text-gray-800 mb-4 flex items-center">
                    <Building className="w-5 h-5 text-green-600 mr-2" />
                    {projectDetails.program === 'clinic' ? 'Medical Clinic' : 'Program'} Requirements
                  </h4>
                  
                  {projectDetails.program === 'clinic' && (
                    <div className="grid md:grid-cols-2 gap-4">
                      <div className="space-y-3">
                        <h5 className="font-medium text-gray-700">Spatial Requirements</h5>
                        <ul className="space-y-2 text-sm text-gray-600">
                          <li className="flex items-start">
                            <Check className="w-4 h-4 text-green-600 mr-2 mt-0.5 flex-shrink-0" />
                            Reception area with waiting space (60-80m²)
                          </li>
                          <li className="flex items-start">
                            <Check className="w-4 h-4 text-green-600 mr-2 mt-0.5 flex-shrink-0" />
                            4-6 consultation/examination rooms (15-20m² each)
                          </li>
                          <li className="flex items-start">
                            <Check className="w-4 h-4 text-green-600 mr-2 mt-0.5 flex-shrink-0" />
                            Staff areas and administration (30-40m²)
                          </li>
                          <li className="flex items-start">
                            <Check className="w-4 h-4 text-green-600 mr-2 mt-0.5 flex-shrink-0" />
                            Accessible restrooms and utility spaces
                          </li>
                        </ul>
                      </div>
                      
                      <div className="space-y-3">
                        <h5 className="font-medium text-gray-700">Design Considerations</h5>
                        <ul className="space-y-2 text-sm text-gray-600">
                          <li className="flex items-start">
                            <Check className="w-4 h-4 text-green-600 mr-2 mt-0.5 flex-shrink-0" />
                            Patient privacy and acoustic separation
                          </li>
                          <li className="flex items-start">
                            <Check className="w-4 h-4 text-green-600 mr-2 mt-0.5 flex-shrink-0" />
                            Natural lighting for healing environment
                          </li>
                          <li className="flex items-start">
                            <Check className="w-4 h-4 text-green-600 mr-2 mt-0.5 flex-shrink-0" />
                            Separate staff and patient circulation
                          </li>
                          <li className="flex items-start">
                            <Check className="w-4 h-4 text-green-600 mr-2 mt-0.5 flex-shrink-0" />
                            ADA compliance and universal design
                          </li>
                        </ul>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* AI Generation Preview */}
              <div className="mt-6 bg-gray-100 rounded-xl p-6">
                <h4 className="font-semibold text-gray-800 mb-3 flex items-center">
                  <Cpu className="w-5 h-5 text-blue-600 mr-2" />
                  AI Generation Parameters
                </h4>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm">
                  <div className="bg-white rounded-lg p-3">
                    <p className="text-gray-600 text-xs">Location Style</p>
                    <p className="font-medium">{styleChoice === 'blend' ? 'Adaptive' : 'Portfolio'}</p>
                  </div>
                  <div className="bg-white rounded-lg p-3">
                    <p className="text-gray-600 text-xs">Climate Optimized</p>
                    <p className="font-medium">Yes</p>
                  </div>
                  <div className="bg-white rounded-lg p-3">
                    <p className="text-gray-600 text-xs">Sustainability</p>
                    <p className="font-medium">LEED Gold+</p>
                  </div>
                  <div className="bg-white rounded-lg p-3">
                    <p className="text-gray-600 text-xs">Code Compliance</p>
                    <p className="font-medium">Auto-verified</p>
                  </div>
                </div>
              </div>
              
              <button
                onClick={generateDesigns}
                className="mt-6 w-full bg-gradient-to-r from-green-600 to-emerald-600 text-white px-6 py-4 rounded-xl hover:from-green-700 hover:to-emerald-700 transition-all duration-300 font-medium flex items-center justify-center disabled:opacity-50"
                disabled={!projectDetails.area || !projectDetails.program || isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 animate-spin" />
                    AI is generating your designs...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2" />
                    Generate AI Designs
                  </>
                )}
              </button>
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-6 animate-fadeIn">
            <div className="bg-white rounded-2xl shadow-xl p-8">
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h2 className="text-3xl font-bold text-gray-800">AI-Generated Designs</h2>
                  <p className="text-gray-600 mt-1">Complete architectural solution ready for export</p>
                </div>
                <div className="flex items-center bg-green-100 px-4 py-2 rounded-full">
                  <Sparkles className="w-5 h-5 text-green-600 mr-2" />
                  <span className="text-green-700 font-medium">Generation Complete</span>
                </div>
              </div>
              
              {/* Design Overview Stats */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
                <div className="bg-blue-50 rounded-xl p-4 text-center">
                  <p className="text-3xl font-bold text-blue-600">{projectDetails.area}m²</p>
                  <p className="text-sm text-gray-600">Total Area</p>
                </div>
                <div className="bg-green-50 rounded-xl p-4 text-center">
                  <p className="text-3xl font-bold text-green-600">{generatedDesigns?.floorPlan.efficiency}</p>
                  <p className="text-sm text-gray-600">Space Efficiency</p>
                </div>
                <div className="bg-purple-50 rounded-xl p-4 text-center">
                  <p className="text-3xl font-bold text-purple-600">4.8/5</p>
                  <p className="text-sm text-gray-600">Design Score</p>
                </div>
                <div className="bg-orange-50 rounded-xl p-4 text-center">
                  <p className="text-3xl font-bold text-orange-600">A+</p>
                  <p className="text-sm text-gray-600">Energy Rating</p>
                </div>
              </div>

              {/* Main Design Display */}
              <div className="grid lg:grid-cols-2 gap-6">
                {/* Multi-Level Floor Plans */}
                <div className="bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl p-6">
                  <h3 className="font-semibold text-gray-800 mb-4 flex items-center justify-between">
                    <span className="flex items-center">
                      <FileText className="w-5 h-5 text-gray-600 mr-2" />
                      Floor Plans ({generatedDesigns?.floorPlan.floorCount || 1} Level{generatedDesigns?.floorPlan.floorCount > 1 ? 's' : ''})
                    </span>
                  </h3>

                  <div className="space-y-4">
                    {/* Ground Floor */}
                    {generatedDesigns?.floorPlan.levels?.ground && (
                      <div>
                        <p className="text-sm font-medium text-gray-700 mb-2">Ground Floor</p>
                        <div
                          className="bg-white rounded-lg h-80 flex items-center justify-center relative overflow-hidden cursor-pointer hover:shadow-lg transition-shadow"
                          onClick={() => openImageModal(generatedDesigns.floorPlan.levels.ground, 'Ground Floor Plan')}
                        >
                          <img
                            src={generatedDesigns.floorPlan.levels.ground}
                            alt="Ground Floor Plan"
                            className="w-full h-full object-contain"
                          />
                          <div className="absolute bottom-4 left-4 bg-white/90 backdrop-blur px-3 py-1 rounded-full text-xs font-medium text-gray-700">
                            Ground Level - Scale 1:100
                          </div>
                          <div className="absolute top-4 right-4 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                            <ZoomIn className="w-4 h-4 text-gray-700" />
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Upper Floor */}
                    {generatedDesigns?.floorPlan.levels?.upper && (
                      <div>
                        <p className="text-sm font-medium text-gray-700 mb-2">Upper Floor</p>
                        <div
                          className="bg-white rounded-lg h-80 flex items-center justify-center relative overflow-hidden cursor-pointer hover:shadow-lg transition-shadow"
                          onClick={() => openImageModal(generatedDesigns.floorPlan.levels.upper, 'Upper Floor Plan')}
                        >
                          <img
                            src={generatedDesigns.floorPlan.levels.upper}
                            alt="Upper Floor Plan"
                            className="w-full h-full object-contain"
                          />
                          <div className="absolute bottom-4 left-4 bg-white/90 backdrop-blur px-3 py-1 rounded-full text-xs font-medium text-gray-700">
                            Upper Level - Scale 1:100
                          </div>
                          <div className="absolute top-4 right-4 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                            <ZoomIn className="w-4 h-4 text-gray-700" />
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Roof Plan */}
                    {generatedDesigns?.floorPlan.levels?.roof && (
                      <div>
                        <p className="text-sm font-medium text-gray-700 mb-2">Roof Plan</p>
                        <div
                          className="bg-white rounded-lg h-80 flex items-center justify-center relative overflow-hidden cursor-pointer hover:shadow-lg transition-shadow"
                          onClick={() => openImageModal(generatedDesigns.floorPlan.levels.roof, 'Roof Plan')}
                        >
                          <img
                            src={generatedDesigns.floorPlan.levels.roof}
                            alt="Roof Plan"
                            className="w-full h-full object-contain"
                          />
                          <div className="absolute bottom-4 left-4 bg-white/90 backdrop-blur px-3 py-1 rounded-full text-xs font-medium text-gray-700">
                            Roof Level - Scale 1:100
                          </div>
                          <div className="absolute top-4 right-4 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                            <ZoomIn className="w-4 h-4 text-gray-700" />
                          </div>
                        </div>
                      </div>
                    )}
                  </div>

                  <div className="mt-4 flex items-center justify-between text-sm">
                    <p className="text-gray-600">{generatedDesigns?.floorPlan.circulation}</p>
                    <p className="text-gray-600">Efficiency: {generatedDesigns?.floorPlan.efficiency}</p>
                  </div>

                  {/* STEP 5: Consistency Indicator */}
                  <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg flex items-start">
                    <Check className="w-5 h-5 text-blue-600 mr-2 flex-shrink-0 mt-0.5" />
                    <div>
                      <p className="text-sm font-medium text-blue-900">2D Floor Plan Generated</p>
                      <p className="text-xs text-blue-700 mt-1">
                        Used as ControlNet guide for 3D visualization consistency →
                      </p>
                    </div>
                  </div>
                </div>

                {/* 3D Views: 2 Exterior + 1 Interior */}
                <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl p-6">
                  {/* STEP 5: Consistency Indicator */}
                  <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg flex items-start">
                    <Layers className="w-5 h-5 text-green-600 mr-2 flex-shrink-0 mt-0.5" />
                    <div>
                      <p className="text-sm font-medium text-green-900">3D Derived from 2D Floor Plan</p>
                      <p className="text-xs text-green-700 mt-1">
                        ControlNet ensured spatial consistency between floor plan layout and 3D views
                      </p>
                    </div>
                  </div>

                  <h3 className="font-semibold text-gray-800 mb-4 flex items-center">
                    <Building className="w-5 h-5 text-purple-600 mr-2" />
                    3D Visualizations (5 Views: Exterior, Interior, Axonometric, Perspective)
                  </h3>

                  <div className="grid md:grid-cols-2 gap-4 mb-4">
                    {/* Exterior Front View */}
                    <div className="relative">
                      <div
                        className="bg-gradient-to-br from-blue-400 to-purple-500 rounded-lg h-64 flex items-center justify-center relative overflow-hidden cursor-pointer hover:shadow-xl transition-shadow"
                        onClick={() => generatedDesigns?.model3D.images?.[0] && openImageModal(generatedDesigns.model3D.images[0], 'Exterior - Front View')}
                      >
                        {generatedDesigns?.model3D.images && generatedDesigns.model3D.images[0] ? (
                          <img
                            src={generatedDesigns.model3D.images[0]}
                            alt="Exterior Front View"
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              e.target.style.display = 'none';
                              e.target.nextSibling.style.display = 'flex';
                            }}
                          />
                        ) : null}
                        <div className="absolute inset-0 bg-gradient-to-br from-blue-400/20 to-purple-500/20 flex items-center justify-center" style={{ display: generatedDesigns?.model3D.images?.[0] ? 'none' : 'flex' }}>
                          <Eye className="w-12 h-12 text-white/50" />
                        </div>
                        {generatedDesigns?.model3D.images?.[0] && (
                          <div className="absolute top-2 right-2 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                            <ZoomIn className="w-4 h-4 text-gray-700" />
                          </div>
                        )}
                      </div>
                      <div className="absolute top-2 left-2 bg-white/90 backdrop-blur px-2 py-1 rounded text-xs font-medium text-gray-700">
                        Exterior - Front View
                      </div>
                    </div>

                    {/* Exterior Side View */}
                    <div className="relative">
                      <div
                        className="bg-gradient-to-br from-purple-400 to-pink-500 rounded-lg h-64 flex items-center justify-center relative overflow-hidden cursor-pointer hover:shadow-xl transition-shadow"
                        onClick={() => generatedDesigns?.model3D.images?.[1] && openImageModal(generatedDesigns.model3D.images[1], 'Exterior - Side View')}
                      >
                        {generatedDesigns?.model3D.images && generatedDesigns.model3D.images[1] ? (
                          <img
                            src={generatedDesigns.model3D.images[1]}
                            alt="Exterior Side View"
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              e.target.style.display = 'none';
                              e.target.nextSibling.style.display = 'flex';
                            }}
                          />
                        ) : null}
                        <div className="absolute inset-0 bg-gradient-to-br from-purple-400/20 to-pink-500/20 flex items-center justify-center" style={{ display: generatedDesigns?.model3D.images?.[1] ? 'none' : 'flex' }}>
                          <Eye className="w-12 h-12 text-white/50" />
                        </div>
                        {generatedDesigns?.model3D.images?.[1] && (
                          <div className="absolute top-2 right-2 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                            <ZoomIn className="w-4 h-4 text-gray-700" />
                          </div>
                        )}
                      </div>
                      <div className="absolute top-2 left-2 bg-white/90 backdrop-blur px-2 py-1 rounded text-xs font-medium text-gray-700">
                        Exterior - Side View
                      </div>
                    </div>
                  </div>

                  {/* Interior View */}
                  <div className="relative mb-4">
                    <div
                      className="bg-gradient-to-br from-pink-400 to-orange-500 rounded-lg h-80 flex items-center justify-center relative overflow-hidden cursor-pointer hover:shadow-xl transition-shadow"
                      onClick={() => generatedDesigns?.model3D.images?.[2] && openImageModal(generatedDesigns.model3D.images[2], 'Interior - Main Space')}
                    >
                      {generatedDesigns?.model3D.images && generatedDesigns.model3D.images[2] ? (
                        <img
                          src={generatedDesigns.model3D.images[2]}
                          alt="Interior View"
                          className="w-full h-full object-cover"
                          onError={(e) => {
                            e.target.style.display = 'none';
                            e.target.nextSibling.style.display = 'flex';
                          }}
                        />
                      ) : null}
                      <div className="absolute inset-0 bg-gradient-to-br from-pink-400/20 to-orange-500/20 flex items-center justify-center" style={{ display: generatedDesigns?.model3D.images?.[2] ? 'none' : 'flex' }}>
                        <Eye className="w-12 h-12 text-white/50" />
                      </div>
                      {generatedDesigns?.model3D.images?.[2] && (
                        <div className="absolute top-2 right-2 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                          <ZoomIn className="w-4 h-4 text-gray-700" />
                        </div>
                      )}
                    </div>
                    <div className="absolute top-2 left-2 bg-white/90 backdrop-blur px-2 py-1 rounded text-xs font-medium text-gray-700">
                      Interior - Main Space
                    </div>
                  </div>

                  {/* Axonometric and Perspective Views */}
                  <div className="grid md:grid-cols-2 gap-4">
                    {/* Axonometric View */}
                    <div className="relative">
                      <div
                        className="bg-gradient-to-br from-teal-400 to-blue-500 rounded-lg h-64 flex items-center justify-center relative overflow-hidden cursor-pointer hover:shadow-xl transition-shadow"
                        onClick={() => generatedDesigns?.model3D.images?.[3] && openImageModal(generatedDesigns.model3D.images[3], 'Axonometric View')}
                      >
                        {generatedDesigns?.model3D.images && generatedDesigns.model3D.images[3] ? (
                          <img
                            src={generatedDesigns.model3D.images[3]}
                            alt="Axonometric View"
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              e.target.style.display = 'none';
                              e.target.nextSibling.style.display = 'flex';
                            }}
                          />
                        ) : null}
                        <div className="absolute inset-0 bg-gradient-to-br from-teal-400/20 to-blue-500/20 flex items-center justify-center" style={{ display: generatedDesigns?.model3D.images?.[3] ? 'none' : 'flex' }}>
                          <Eye className="w-12 h-12 text-white/50" />
                        </div>
                        {generatedDesigns?.model3D.images?.[3] && (
                          <div className="absolute top-2 right-2 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                            <ZoomIn className="w-4 h-4 text-gray-700" />
                          </div>
                        )}
                      </div>
                      <div className="absolute top-2 left-2 bg-white/90 backdrop-blur px-2 py-1 rounded text-xs font-medium text-gray-700">
                        Axonometric View
                      </div>
                    </div>

                    {/* Perspective View */}
                    <div className="relative">
                      <div
                        className="bg-gradient-to-br from-indigo-400 to-purple-600 rounded-lg h-64 flex items-center justify-center relative overflow-hidden cursor-pointer hover:shadow-xl transition-shadow"
                        onClick={() => generatedDesigns?.model3D.images?.[4] && openImageModal(generatedDesigns.model3D.images[4], 'Perspective View')}
                      >
                        {generatedDesigns?.model3D.images && generatedDesigns.model3D.images[4] ? (
                          <img
                            src={generatedDesigns.model3D.images[4]}
                            alt="Perspective View"
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              e.target.style.display = 'none';
                              e.target.nextSibling.style.display = 'flex';
                            }}
                          />
                        ) : null}
                        <div className="absolute inset-0 bg-gradient-to-br from-indigo-400/20 to-purple-600/20 flex items-center justify-center" style={{ display: generatedDesigns?.model3D.images?.[4] ? 'none' : 'flex' }}>
                          <Eye className="w-12 h-12 text-white/50" />
                        </div>
                        {generatedDesigns?.model3D.images?.[4] && (
                          <div className="absolute top-2 right-2 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                            <ZoomIn className="w-4 h-4 text-gray-700" />
                          </div>
                        )}
                      </div>
                      <div className="absolute top-2 left-2 bg-white/90 backdrop-blur px-2 py-1 rounded text-xs font-medium text-gray-700">
                        Perspective View
                      </div>
                    </div>
                  </div>

                  <div className="mt-4 space-y-2">
                    <p className="text-sm font-medium text-gray-700">{generatedDesigns?.model3D.style}</p>
                    <div className="flex flex-wrap gap-2">
                      {generatedDesigns?.model3D.materials.map((material, idx) => (
                        <span key={idx} className="text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded-full">
                          {material}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              {/* Elevations and Sections */}
              {generatedDesigns?.technicalDrawings && (Object.keys(generatedDesigns.technicalDrawings.elevations).length > 0 || Object.keys(generatedDesigns.technicalDrawings.sections).length > 0) && (
                <div className="mt-8">
                  <h3 className="font-semibold text-gray-800 mb-6 flex items-center text-xl">
                    <FileText className="w-6 h-6 text-gray-600 mr-2" />
                    Technical Drawings (Elevations & Sections)
                  </h3>

                  {/* Elevations */}
                  {Object.keys(generatedDesigns.technicalDrawings.elevations).length > 0 && (
                    <div className="mb-8">
                      <h4 className="font-medium text-gray-700 mb-4">Elevations</h4>
                      <div className="grid md:grid-cols-2 gap-4">
                        {generatedDesigns.technicalDrawings.elevations.north && (
                          <div className="bg-white rounded-lg p-4">
                            <p className="text-sm font-medium text-gray-700 mb-2">North Elevation</p>
                            <div
                              className="bg-gray-50 rounded h-64 flex items-center justify-center overflow-hidden cursor-pointer hover:shadow-lg transition-shadow relative"
                              onClick={() => openImageModal(generatedDesigns.technicalDrawings.elevations.north, 'North Elevation')}
                            >
                              <img
                                src={generatedDesigns.technicalDrawings.elevations.north}
                                alt="North Elevation"
                                className="w-full h-full object-contain"
                              />
                              <div className="absolute top-2 right-2 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                                <ZoomIn className="w-4 h-4 text-gray-700" />
                              </div>
                            </div>
                          </div>
                        )}
                        {generatedDesigns.technicalDrawings.elevations.south && (
                          <div className="bg-white rounded-lg p-4">
                            <p className="text-sm font-medium text-gray-700 mb-2">South Elevation</p>
                            <div
                              className="bg-gray-50 rounded h-64 flex items-center justify-center overflow-hidden cursor-pointer hover:shadow-lg transition-shadow relative"
                              onClick={() => openImageModal(generatedDesigns.technicalDrawings.elevations.south, 'South Elevation')}
                            >
                              <img
                                src={generatedDesigns.technicalDrawings.elevations.south}
                                alt="South Elevation"
                                className="w-full h-full object-contain"
                              />
                              <div className="absolute top-2 right-2 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                                <ZoomIn className="w-4 h-4 text-gray-700" />
                              </div>
                            </div>
                          </div>
                        )}
                        {generatedDesigns.technicalDrawings.elevations.east && (
                          <div className="bg-white rounded-lg p-4">
                            <p className="text-sm font-medium text-gray-700 mb-2">East Elevation</p>
                            <div
                              className="bg-gray-50 rounded h-64 flex items-center justify-center overflow-hidden cursor-pointer hover:shadow-lg transition-shadow relative"
                              onClick={() => openImageModal(generatedDesigns.technicalDrawings.elevations.east, 'East Elevation')}
                            >
                              <img
                                src={generatedDesigns.technicalDrawings.elevations.east}
                                alt="East Elevation"
                                className="w-full h-full object-contain"
                              />
                              <div className="absolute top-2 right-2 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                                <ZoomIn className="w-4 h-4 text-gray-700" />
                              </div>
                            </div>
                          </div>
                        )}
                        {generatedDesigns.technicalDrawings.elevations.west && (
                          <div className="bg-white rounded-lg p-4">
                            <p className="text-sm font-medium text-gray-700 mb-2">West Elevation</p>
                            <div
                              className="bg-gray-50 rounded h-64 flex items-center justify-center overflow-hidden cursor-pointer hover:shadow-lg transition-shadow relative"
                              onClick={() => openImageModal(generatedDesigns.technicalDrawings.elevations.west, 'West Elevation')}
                            >
                              <img
                                src={generatedDesigns.technicalDrawings.elevations.west}
                                alt="West Elevation"
                                className="w-full h-full object-contain"
                              />
                              <div className="absolute top-2 right-2 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                                <ZoomIn className="w-4 h-4 text-gray-700" />
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Sections */}
                  {Object.keys(generatedDesigns.technicalDrawings.sections).length > 0 && (
                    <div>
                      <h4 className="font-medium text-gray-700 mb-4">Building Sections</h4>
                      <div className="grid md:grid-cols-2 gap-4">
                        {generatedDesigns.technicalDrawings.sections.longitudinal && (
                          <div className="bg-white rounded-lg p-4">
                            <p className="text-sm font-medium text-gray-700 mb-2">Longitudinal Section</p>
                            <div
                              className="bg-gray-50 rounded h-64 flex items-center justify-center overflow-hidden cursor-pointer hover:shadow-lg transition-shadow relative"
                              onClick={() => openImageModal(generatedDesigns.technicalDrawings.sections.longitudinal, 'Longitudinal Section')}
                            >
                              <img
                                src={generatedDesigns.technicalDrawings.sections.longitudinal}
                                alt="Longitudinal Section"
                                className="w-full h-full object-contain"
                              />
                              <div className="absolute top-2 right-2 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                                <ZoomIn className="w-4 h-4 text-gray-700" />
                              </div>
                            </div>
                          </div>
                        )}
                        {generatedDesigns.technicalDrawings.sections.cross && (
                          <div className="bg-white rounded-lg p-4">
                            <p className="text-sm font-medium text-gray-700 mb-2">Cross Section</p>
                            <div
                              className="bg-gray-50 rounded h-64 flex items-center justify-center overflow-hidden cursor-pointer hover:shadow-lg transition-shadow relative"
                              onClick={() => openImageModal(generatedDesigns.technicalDrawings.sections.cross, 'Cross Section')}
                            >
                              <img
                                src={generatedDesigns.technicalDrawings.sections.cross}
                                alt="Cross Section"
                                className="w-full h-full object-contain"
                              />
                              <div className="absolute top-2 right-2 bg-white/90 backdrop-blur p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity">
                                <ZoomIn className="w-4 h-4 text-gray-700" />
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Style Blending Analysis */}
              {generatedDesigns?.styleRationale && (
                <div className="mt-8 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-xl p-8">
                  <h3 className="text-2xl font-semibold text-gray-800 mb-6 flex items-center">
                    <Sparkles className="w-6 h-6 text-indigo-600 mr-3" />
                    Style Integration Analysis
                  </h3>

                  <div className="grid md:grid-cols-3 gap-6">
                    {/* Local Architecture Impact */}
                    {generatedDesigns.styleRationale.localImpact && (
                      <div className="bg-white/70 rounded-lg p-6">
                        <div className="flex items-center mb-3">
                          <MapPin className="w-5 h-5 text-blue-600 mr-2" />
                          <h4 className="font-semibold text-gray-700">Local Architecture Impact</h4>
                        </div>
                        <p className="text-sm text-gray-600 leading-relaxed">
                          {generatedDesigns.styleRationale.localImpact}
                        </p>
                      </div>
                    )}

                    {/* Portfolio Style Integration */}
                    {generatedDesigns.styleRationale.portfolioImpact && (
                      <div className="bg-white/70 rounded-lg p-6">
                        <div className="flex items-center mb-3">
                          <Home className="w-5 h-5 text-purple-600 mr-2" />
                          <h4 className="font-semibold text-gray-700">Portfolio Style Integration</h4>
                        </div>
                        <p className="text-sm text-gray-600 leading-relaxed">
                          {generatedDesigns.styleRationale.portfolioImpact}
                        </p>
                      </div>
                    )}

                    {/* Climate & Context Adaptation */}
                    {generatedDesigns.styleRationale.climateIntegration && (
                      <div className="bg-white/70 rounded-lg p-6">
                        <div className="flex items-center mb-3">
                          <Sun className="w-5 h-5 text-orange-600 mr-2" />
                          <h4 className="font-semibold text-gray-700">Climate Adaptation</h4>
                        </div>
                        <p className="text-sm text-gray-600 leading-relaxed">
                          {generatedDesigns.styleRationale.climateIntegration}
                        </p>
                      </div>
                    )}
                  </div>

                  {/* Blend Weight Summary */}
                  <div className="mt-6 p-4 bg-white/50 rounded-lg border border-indigo-200">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <Palette className="w-5 h-5 text-indigo-600 mr-2" />
                        <span className="text-sm font-medium text-gray-700">Design Synthesis</span>
                      </div>
                      <div className="flex gap-4">
                        <span className="text-xs px-3 py-1 bg-green-100 text-green-700 rounded-full">
                          Materials: {Math.round(materialWeight * 100)}% Portfolio
                        </span>
                        <span className="text-xs px-3 py-1 bg-purple-100 text-purple-700 rounded-full">
                          Characteristics: {Math.round(characteristicWeight * 100)}% Portfolio
                        </span>
                      </div>
                    </div>
                    <p className="mt-3 text-sm text-gray-600 italic">
                      This design achieves a sophisticated balance between contextual responsiveness and signature style expression
                      through carefully calibrated material and characteristic integration.
                    </p>
                  </div>
                </div>
              )}

              {/* Technical Specifications */}
              <div className="mt-8 grid md:grid-cols-3 gap-6">
                <div className="bg-blue-50 rounded-xl p-6">
                  <h4 className="font-semibold text-gray-800 mb-3">Structural System</h4>
                  <p className="text-sm text-gray-700 mb-2">{generatedDesigns?.technical.structural}</p>
                  <p className="text-sm text-gray-600">{generatedDesigns?.technical.foundation}</p>
                </div>
                
                <div className="bg-green-50 rounded-xl p-6">
                  <h4 className="font-semibold text-gray-800 mb-3">MEP Systems</h4>
                  <ul className="space-y-1 text-sm text-gray-700">
                    <li><span className="font-medium">HVAC:</span> {generatedDesigns?.technical.mep.hvac}</li>
                    <li><span className="font-medium">Electrical:</span> {generatedDesigns?.technical.mep.electrical}</li>
                    <li><span className="font-medium">Plumbing:</span> {generatedDesigns?.technical.mep.plumbing}</li>
                  </ul>
                </div>
                
                <div className="bg-purple-50 rounded-xl p-6">
                  <h4 className="font-semibold text-gray-800 mb-3">Sustainability Features</h4>
                  <ul className="space-y-1 text-sm text-gray-700">
                    {generatedDesigns?.model3D.sustainabilityFeatures.map((feature, idx) => (
                      <li key={idx} className="flex items-start">
                        <Check className="w-4 h-4 text-green-600 mr-1 mt-0.5 flex-shrink-0" />
                        {feature}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>

              {/* Cost & Timeline */}
              <div className="mt-6 bg-gradient-to-r from-orange-50 to-yellow-50 rounded-xl p-6">
                <h4 className="font-semibold text-gray-800 mb-4">Project Economics</h4>
                <div className="grid md:grid-cols-3 gap-6">
                  <div>
                    <p className="text-sm text-gray-600">Estimated Construction Cost</p>
                    <p className="text-2xl font-bold text-gray-800">{generatedDesigns?.cost.construction}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Construction Timeline</p>
                    <p className="text-2xl font-bold text-gray-800">{generatedDesigns?.cost.timeline}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Annual Energy Savings</p>
                    <p className="text-2xl font-bold text-green-600">{generatedDesigns?.cost.energySavings}</p>
                  </div>
                </div>
              </div>

              {/* Export Options - UPDATED WITH WORKING DOWNLOADS */}
              <div className="mt-8">
                <h4 className="font-semibold text-gray-800 mb-4">Export Options</h4>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <button 
                    onClick={() => {
                      const downloadDetails = { ...projectDetails, styleChoice, address: locationData?.address };
                      const content = generateDWGContent(downloadDetails, generatedDesigns?.bimModel);
                      downloadFile('ArchitectAI_Design.dwg', content, 'application/acad');
                      setDownloadCount(prev => prev + 1);
                      showToast('✓ DWG file downloaded successfully!');
                    }}
                    className="flex flex-col items-center p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors group cursor-pointer"
                  >
                    <FileCode className="w-8 h-8 text-gray-600 mb-2 group-hover:text-blue-600 transition-colors" />
                    <span className="font-semibold text-gray-800">DWG</span>
                    <span className="text-xs text-gray-600 mt-1">AutoCAD 2D Drawings</span>
                  </button>
                  
                  <button 
                    onClick={() => {
                      const downloadDetails = { ...projectDetails, styleChoice, address: locationData?.address };
                      const content = generateRVTContent(downloadDetails);
                      downloadFile('ArchitectAI_Model.rvt', content, 'application/octet-stream');
                      setDownloadCount(prev => prev + 1);
                      showToast('✓ RVT file downloaded successfully!');
                    }}
                    className="flex flex-col items-center p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors group cursor-pointer"
                  >
                    <Building className="w-8 h-8 text-gray-600 mb-2 group-hover:text-purple-600 transition-colors" />
                    <span className="font-semibold text-gray-800">RVT</span>
                    <span className="text-xs text-gray-600 mt-1">Revit 3D Model</span>
                  </button>
                  
                  <button 
                    onClick={() => {
                      const downloadDetails = { ...projectDetails, styleChoice, address: locationData?.address };
                      const content = generateIFCContent(downloadDetails, generatedDesigns?.bimModel);
                      downloadFile('ArchitectAI_BIM.ifc', content, 'application/x-step');
                      setDownloadCount(prev => prev + 1);
                      showToast('✓ IFC file downloaded successfully!');
                    }}
                    className="flex flex-col items-center p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors group cursor-pointer"
                  >
                    <Layers className="w-8 h-8 text-gray-600 mb-2 group-hover:text-green-600 transition-colors" />
                    <span className="font-semibold text-gray-800">IFC</span>
                    <span className="text-xs text-gray-600 mt-1">BIM Standard</span>
                  </button>

                  <button
                    onClick={() => {
                      const pdfContent = generatePDFContent(projectDetails, styleChoice, locationData);
                      const newWindow = window.open('', '_blank');
                      newWindow.document.write(pdfContent);
                      newWindow.document.close();
                      setTimeout(() => {
                        newWindow.print();
                      }, 250);
                      setDownloadCount(prev => prev + 1);
                      showToast('✓ PDF document opened for printing!');
                    }}
                    className="flex flex-col items-center p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors group cursor-pointer"
                  >
                    <FileText className="w-8 h-8 text-gray-600 mb-2 group-hover:text-red-600 transition-colors" />
                    <span className="font-semibold text-gray-800">PDF</span>
                    <span className="text-xs text-gray-600 mt-1">Documentation Set</span>
                  </button>

                  <button
                    onClick={() => {
                      const htmlContent = generateDimensionedFloorPlan(projectDetails, generatedDesigns);
                      if (htmlContent) {
                        const newWindow = window.open('', '_blank');
                        newWindow.document.write(htmlContent);
                        newWindow.document.close();
                        setDownloadCount(prev => prev + 1);
                        showToast('✓ Dimensioned floor plan opened in new window!');
                      } else {
                        showToast('⚠️ No floor plan available for dimensioning');
                      }
                    }}
                    className="flex flex-col items-center p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors group cursor-pointer"
                  >
                    <Square className="w-8 h-8 text-gray-600 mb-2 group-hover:text-indigo-600 transition-colors" />
                    <span className="font-semibold text-gray-800">Dimensioned Plan</span>
                    <span className="text-xs text-gray-600 mt-1">With Annotations</span>
                  </button>
                </div>
                
                <div className="mt-4 text-center text-sm text-gray-500">
                  <p>Demo files for investor preview. Production version will include full technical drawings.</p>
                  {downloadCount > 0 && (
                    <p className="mt-2 text-green-600 font-medium">
                      {downloadCount} file{downloadCount > 1 ? 's' : ''} downloaded
                    </p>
                  )}
                </div>
              </div>

              {/* AI Modification */}
              <div className="mt-8 border-t pt-8">
                <button
                  onClick={() => setShowModification(!showModification)}
                  className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-4 rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-300 font-medium flex items-center justify-center"
                >
                  <Sparkles className="mr-2" />
                  Modify Design with AI
                </button>
                
                {showModification && (
                  <div className="mt-4 space-y-4 animate-fadeIn">
                    <textarea
                      placeholder="Describe your modifications... (e.g., 'Make the waiting area 20% larger', 'Add a healing garden courtyard', 'Include more natural lighting in consultation rooms')"
                      className="w-full p-4 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none transition-colors h-32"
                    />
                    <button className="bg-purple-600 text-white px-6 py-3 rounded-xl hover:bg-purple-700 transition-colors">
                      Apply Modifications
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  // Conditionally wrap with Google Maps only when API key is available AND we're on step 2 (map view)
  const shouldLoadMaps = process.env.REACT_APP_GOOGLE_MAPS_API_KEY && currentStep === 2;

  // Image Modal Component - Properly separated with props to prevent re-render flickering
  const ImageModal = React.memo(({
    image,
    title,
    zoom,
    pan,
    dragging,
    onClose,
    onZoomIn,
    onZoomOut,
    onZoomReset,
    onWheel,
    onMouseDown,
    onMouseMove,
    onMouseUp
  }) => {
    if (!image) return null;

    return (
      <div
        className="fixed inset-0 z-50 flex items-center justify-center bg-black/90 backdrop-blur-sm"
        style={{ animation: 'fadeIn 0.2s ease-in' }}
        onClick={(e) => {
          // Close modal when clicking backdrop (not on image or controls)
          if (e.target === e.currentTarget) {
            onClose();
          }
        }}
      >
        {/* Modal Content */}
        <div className="relative w-full h-full flex items-center justify-center p-4">
          {/* Close Button */}
          <button
            onClick={onClose}
            className="absolute top-4 right-4 p-2 bg-white/10 hover:bg-white/20 rounded-full transition-colors z-50"
            aria-label="Close modal"
          >
            <X className="w-6 h-6 text-white" />
          </button>

          {/* Image Title */}
          <div className="absolute top-4 left-4 bg-black/50 backdrop-blur-sm rounded-lg px-4 py-2 z-50">
            <h3 className="text-white font-medium">{title}</h3>
          </div>

          {/* Zoom Controls */}
          <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex items-center gap-2 bg-black/50 backdrop-blur-sm rounded-full px-4 py-2 z-50">
            <button
              onClick={onZoomOut}
              className="p-2 hover:bg-white/20 rounded-full transition-colors"
              disabled={zoom <= 0.5}
              aria-label="Zoom out"
            >
              <ZoomOut className="w-5 h-5 text-white" />
            </button>

            <span className="text-white text-sm font-medium min-w-[60px] text-center">
              {Math.round(zoom * 100)}%
            </span>

            <button
              onClick={onZoomIn}
              className="p-2 hover:bg-white/20 rounded-full transition-colors"
              disabled={zoom >= 3}
              aria-label="Zoom in"
            >
              <ZoomIn className="w-5 h-5 text-white" />
            </button>

            <div className="w-px h-6 bg-white/30 mx-1" />

            <button
              onClick={onZoomReset}
              className="p-2 hover:bg-white/20 rounded-full transition-colors"
              aria-label="Reset zoom"
            >
              <Maximize2 className="w-5 h-5 text-white" />
            </button>
          </div>

          {/* Instructions */}
          <div className="absolute bottom-4 right-4 bg-black/50 backdrop-blur-sm rounded-lg px-3 py-2 text-white text-xs z-50">
            <p>Scroll to zoom • {zoom > 1 ? 'Drag to pan' : 'Zoom in to pan'}</p>
          </div>

          {/* Image Container */}
          <div
            className="relative overflow-hidden flex items-center justify-center"
            style={{
              width: '90vw',
              height: '80vh',
              cursor: zoom > 1 ? (dragging ? 'grabbing' : 'grab') : 'default',
              userSelect: 'none'
            }}
            onWheel={onWheel}
            onMouseDown={onMouseDown}
            onMouseMove={onMouseMove}
            onMouseUp={onMouseUp}
            onMouseLeave={onMouseUp}
          >
            <img
              src={image}
              alt={title}
              className="max-w-none select-none pointer-events-none"
              style={{
                transform: `scale(${zoom}) translate(${pan.x / zoom}px, ${pan.y / zoom}px)`,
                imageRendering: zoom > 2 ? 'pixelated' : 'auto',
                transition: dragging ? 'none' : 'transform 0.2s ease-out',
                maxWidth: zoom === 1 ? '100%' : 'none',
                maxHeight: zoom === 1 ? '100%' : 'none',
                objectFit: 'contain',
                willChange: 'transform'
              }}
              draggable={false}
              onDragStart={(e) => e.preventDefault()}
            />
          </div>
        </div>
      </div>
    );
  });

  const content = (
    <div className={`min-h-screen ${currentStep === 0 ? '' : 'bg-gray-50'} transition-colors duration-500`}>
      {/* Image Modal */}
      <ImageModal
        image={modalImage}
        title={modalImageTitle}
        zoom={imageZoom}
        pan={imagePan}
        dragging={isDragging}
        onClose={closeImageModal}
        onZoomIn={handleZoomIn}
        onZoomOut={handleZoomOut}
        onZoomReset={handleZoomReset}
        onWheel={handleWheel}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
      />

      {toastMessage && (
        <div className="fixed bottom-4 left-4 bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-fadeIn">
          {toastMessage}
        </div>
      )}
      {currentStep > 0 && (
          <div className="sticky top-0 bg-white shadow-sm z-40">
            <div className="max-w-7xl mx-auto px-4 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <Building className="w-8 h-8 text-blue-600 mr-3" />
                  <h1 className="text-2xl font-bold text-gray-800">ArchitectAI Platform</h1>
                </div>

                {/* Progress Indicator */}
                <div className="hidden md:flex items-center space-x-2">
                  {[
                    { step: 1, label: 'Location' },
                    { step: 2, label: 'Analysis' },
                    { step: 3, label: 'Portfolio' },
                    { step: 4, label: 'Details' },
                    { step: 5, label: 'Results' }
                  ].map((item, idx) => (
                    <div key={idx} className="flex items-center">
                      <div className={`
                        flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium
                        ${currentStep >= item.step ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-600'}
                      `}>
                        {currentStep > item.step ? <Check className="w-4 h-4" /> : item.step}
                      </div>
                      {idx < 4 && (
                        <div className={`w-12 h-0.5 mx-1 ${currentStep > item.step ? 'bg-blue-600' : 'bg-gray-300'}`} />
                      )}
                    </div>
                  ))}
                </div>

                <div className="text-sm text-gray-600">
                  Time: <span className="font-medium">{formatElapsedTime(elapsedTime)}</span> elapsed
                </div>
              </div>
            </div>
          </div>
        )}

        <div className={currentStep > 0 ? 'max-w-7xl mx-auto px-4 py-8' : ''}>
          {renderStep()}
        </div>
      </div>
  );

  // Only wrap with Google Maps Wrapper when necessary
  return shouldLoadMaps ? (
    <Wrapper apiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY} libraries={['maps']}>
      {content}
    </Wrapper>
  ) : content;
};

export default ArchitectAIEnhanced;
